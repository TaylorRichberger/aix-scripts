#!/bin/sh

usage()
{
    cat <<USAGE
$0 [options]

    -c [cipher]     Cipher used.  Defaults to aes-256-cbc
    -d [dest]       Destination directory.  Defaults to /tmp/encrypttree_currentdate.  Will be created if necessary.
    -h              Show this menu.
    -k [keytree]    Key directory.  Defaults to /tmp/encrypttree_keys_currentdate. Will be created if necessary.
    -l [length]     Key length in bytes.  Key is fully random, and not necessarily ASCII.
    -s [source]     Source directory.  Defaults to current directory.

    Encrypts an entire filesystem tree with random keys, storing the encrypted files in identical form in the destination tree,
    and the randomly generated keys for each file also in identical form in the keytree.
    
    Do not specify the same tree for source and dest.  You will wipe the files if you do this, and they will not be encrypted.

    For example, if you have the files source/a, source/b/c, source/b/d, source/b/e/f, and source/b/e/g to make the following tree
    . source
    ├── a
    └── b
        ├── c
        └── e
            ├── f
            └── g

    and you execute $0 -s source -d dest -k keytree

    It will create the folling directories for dest and keys, respectively:

    . dest
    ├── a
    └── b
        ├── c
        └── e
            ├── f
            └── g

    . keytree
    ├── a
    └── b
        ├── c
        └── e
            ├── f
            └── g

    The cipher will be aes-256-cbc, with 32 byte random raw binary keys.
USAGE
}

checkerror()
{
    if [ $1 -ne 0 ];
    then
        usage
        exit 1
    fi
}

CIPHER=aes-256-cbc
DESTINATION="/tmp/encrypttree_$(date +%F)"
KEYTREE="/tmp/encrypttree_keys_$(date +%F)"
LENGTH=32
SOURCE=.

while getopts 'c:d:hk:l:s:' opt
do
    case "$opt" in
        c)
            CIPHER="$OPTARG"
            ;;
        d)
            DESTINATION="$OPTARG"
            ;;
        h)
            usage
            exit
            ;;
        k)
            KEYTREE="$OPTARG"
            ;;
        l)
            LENGTH="$OPTARG"
            ;;
        s)
            SOURCE="$OPTARG"
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

echo "CIPHER $CIPHER"
echo "DESTINATION $DESTINATION"
echo "KEYTREE $KEYTREE"
echo "LENGTH $LENGTH"
echo "SOURCE $SOURCE"

AWKSCRIPT='BEGIN { cutlength = length(prefix) + 2; print(substr(line, cutlength)); }'

echo "BUILDING DIRECTORY TREE IN $DESTINATION AND $KEYTREE"
find "$SOURCE" -type d | while read dir
do
    CUTDIR="$(awk -v "prefix=$SOURCE" -v "line=$dir" "$AWKSCRIPT")"
    checkerror $?

    if [ -z "$CUTDIR" ]
    then
        continue
    fi

    mkdir -p "$DESTINATION/$CUTDIR"
    checkerror $?

    mkdir -p "$KEYTREE/$CUTDIR"
    checkerror $?
done

echo "ENCRYPTING FILES FROM $SOURCE TO $DESTINATION WITH KEY TREE $KEYTREE"
find "$SOURCE" -type f | while read file
do
    CUTFILE="$(awk -v "prefix=$SOURCE" -v "line=$file" "$AWKSCRIPT")"
    checkerror $?
    if [ -z "$CUTFILE" ]
    then
        continue
    fi
    DESTFILE="$DESTINATION/$CUTFILE"
    KEYFILE="$KEYTREE/$CUTFILE"
    dd if=/dev/urandom "of=$KEYFILE" bs=1 "count=$LENGTH" 2>/dev/null
    checkerror $?
    openssl enc -"$CIPHER" -salt -in "$file" -out "$DESTFILE" -pass "file:$KEYFILE"
    checkerror $?
done
