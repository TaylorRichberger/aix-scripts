#!/usr/bin/perl
use warnings;
use strict;
use Time::Piece;
use JSON;

sub ParseConfig($);

sub main;
sub dispatch;
sub buildopts;
sub change_account_detail;
sub change_account_detail_aix;
sub change_account_detail_linux;
sub change_account_expire;
sub change_account_expire_linux;
sub create_admin_account;
sub create_sftp_account_linux;
sub create_user_account;
sub delete_account;
sub get_users;
sub get_users_aix;
sub get_users_linux;
sub reset_password_aix;
sub reset_password_linux;
sub select_user;
sub unlock_account_aix;
sub unlock_account_linux;
sub view_account_detail_aix;
sub view_account_detail_linux;
sub view_all_users;

# Parse stanzas into a hash of hashes
sub parsestanzas;
sub quit;

main();

sub ParseConfig($) {
    my $location = $_[0];
    my $data;
    local $/ = undef;
    open(my $file, '<', $location) or return {dir => "/data/IJS", thresholds => []};
    binmode $file;
    my $json = <$file>;
    return decode_json($json);
}

sub main {
    my $config = ParseConfig('/etc/manage_users.json');
    $config->{exit} = 0;
    my %user;

    my %allroutines = (
        change_account_detail => { description => "Change User Account Details", needsUser => 1, routine => 'change_account_detail' },
        change_account_expire => { description => "Change User Account Password Expiry", needsUser => 1, routine => 'change_account_expire_linux' },
        create_admin_account => { description => "Create Admin account", needsUser => 0, routine => 'create_admin_account' },
        create_sftp_account => { description => "Create client account", needsUser => 0, routine => 'create_sftp_account_linux' },
        create_user_account => { description => "Create User account", needsUser => 0, routine => 'create_user_account' },
        delete_account => { description => "Remove user account", needsUser => 1, routine => 'delete_account' },
        quit => { description => "Exit", needsUser => 0, routine => 'quit' },
        reset_password => { description => "Reset password and unlock account", needsUser => 1, routine => 'reset_password' },
        select_user => { description => "Select User", needsUser => 0, routine => 'select_user' },
        unlock_account => { description => "Unlock account without resetting password", needsUser => 1, routine => 'unlock_account' },
        view_account_detail => { description => "View User Account Details", needsUser => 1, routine => 'view_account_detail' },
        view_all_users => { description => "View All Users", needsUser => 0, routine => 'view_all_users' }
    );
    while (!$config->{exit})
    {
        system("clear");
        my @routines;

        for my $item (@{$config->{menu}})
        {
            if (exists($allroutines{$item}))
            {
                push(@routines, $allroutines{$item});
            } else
            {
                print("Could not find requested routine $item!  You are missing functionality!\n");
            }
        }
        push(@routines, $allroutines{quit});

        if (exists($user{name})) {
            print "Selected User:  $user{name} => $user{comment}\n";
            print "------------------------------------------------------------------\n\n";
        } else {
            print "No user selected!  Please create or select a user to proceed\n";
            print "------------------------------------------------------------------\n\n";
        }

        # print routines
        for (my $i = 0; $i < scalar(@routines); $i++)
        {
            print(($i + 1) . ") " . $routines[$i]->{description} . "\n");
        }

        print "------------------------------------------------------------------\n\n";
        print "Select Option(default: 1): ";

        my $opt = <>;
        chomp $opt;

        # if (input is a digit) && (input is > 1) && (input does not exceed list length)
        if (($opt =~ m/^\d+$/) && ($opt > 0) && ($opt <= scalar(@routines)))
        {
            # options are listed starting at 1, but list is 0-indexed
            $opt--;

            # If user is not needed, proceed, otherwise check for user
            if ((!$routines[$opt]->{needsUser}) || exists($user{name}))
            {
                # execute code reference
                dispatch($routines[$opt]->{routine}, \%user, $config);
            }
        }
    }
}

sub dispatch {
    my ($function, $user, $config) = @_;
    my %dispatch = (
        change_account_detail => {AIX => \&change_account_detail_aix, Linux => \&change_account_detail_linux},
        change_account_expire => {Linux => \&change_account_expire_linux},
        create_admin_account => {DEFAULT => \&create_admin_account},
        create_sftp_account => {Linux => \&create_sftp_account_linux},
        create_user_account => {DEFAULT => \&create_user_account},
        delete_account => {DEFAULT => \&delete_account},
        reset_password => {AIX => \&reset_password_aix, Linux => \&reset_password_linux},
        select_user => {DEFAULT => \&select_user},
        unlock_account => {AIX => \&unlock_account_aix, Linux => \&unlock_account_linux},
        view_account_detail => {AIX => \&view_account_detail_aix, Linux => \&view_account_detail_linux},
        view_all_users => {DEFAULT => \&view_all_users},
        quit => {DEFAULT => \&quit},
    );

    my $os = $config->{OS};

    if (exists($dispatch{$function}))
    {
        if (exists($dispatch{$function}->{$os}))
        {
            $dispatch{$function}->{$os}->($user, $config);
        } elsif (exists($dispatch{$function}->{DEFAULT}))
        {
            $dispatch{$function}->{DEFAULT}->($user, $config);
        } else
        {
            print("There is no $function function for OS $config->{OS}, this is a bug in the program or deployment.\n");
        }
    } else
    {
        print("There is no $function function, this is a bug in the program or deployment.\n");
    }
}

sub buildopts {
    my $opts = $_[0];
    my @singles;
    my @argopts;
    my @args;

    for my $opt (@{$opts})
    {
        if (ref($opt) eq 'ARRAY')
        {
            if (scalar(@{$opt} > 1))
            {
                # Make sure all single-quotes are escaped and everything else is properly captured
                my $optarg = $opt->[1];
                $optarg =~ s/'/'"'"'/g;
                push(@argopts, "-$opt->[0]", "'$optarg'");
            } else
            {
                push(@singles, $opt->[0]);
            }
        } else
        {
            my $arg = $opt;
            $arg =~ s/'/'"'"'/g;
            push(@args, "'$arg'");
        }
    }
    my @outstrings;

    if (scalar(@singles) > 0)
    {
        push(@outstrings, '-' . join('', @singles));
    }

    push(@outstrings, @argopts);
    push(@outstrings, @args);
    return join(' ', @outstrings);
}

sub get_users {
    my ($config) = @_;
    my %dispatch = (
        AIX => \&get_users_aix,
        Linux => \&get_users_linux
    );

    if (exists($dispatch{$config->{OS}}))
    {
        $dispatch{$config->{OS}}->();
    } else
    {
        print("There is no get_users function for OS $config->{OS}, this is a bug in the program or deployment.\n");
    }
}

# AIX get users
sub get_users_aix {

    my @users;
    my %userrefs;

    my %secpasswd = parsestanzas('/etc/security/passwd');
    my %secuser = parsestanzas('/etc/security/user');

    setpwent();
    while (my @pw = getpwent())
    {
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{quota}, $user{comment}, $user{gcos}, $user{home}, $user{shell}, $user{expire}) = @pw;

        $user{pgrp} = (getgrgid($user{gid}))[0];
        $user{groups} = [];

        # We set userrefs so that we can use the grent functions to fill the groups field idiomatically
        $userrefs{$user{name}} = \%user;

        if (defined($secpasswd{$user{name}}) && defined($secpasswd{$user{name}}{lastupdate}) && ($secpasswd{$user{name}}{lastupdate} =~ m/^\d+$/))
        {
            $user{lastchange} = $secpasswd{$user{name}}{lastupdate} / (60 * 60 * 24);
        } else
        {
            $user{lastchange} = '';
        }

        #$user{maxage} = `sudo lssec -f /etc/security/user -s $user{name} -a maxage`;
        if (defined($secuser{$user{name}}) && defined($secuser{$user{name}}{maxage}) && ($secuser{$user{name}}{maxage} =~ m/^\d+$/))
        {
            $user{maxage} = $secuser{$user{name}}{maxage};
        } else
        {
            $user{maxage} = 0;
        }

        # Day of password expiration
        $user{expirationdate} = '';
        if ($user{maxage} > 0)
        {
            # Calculate the day of expiration
            $user{expirationdate} = (($user{maxage} * 7) + $user{lastchange})
        }

        $user{reserved} = '';
        push(@users, \%user);
    }
    endpwent();

    setgrent();
    while (my @gr = getgrent())
    {
        for my $member (split(/\s+/, $gr[3]))
        {
            unless ($gr[0] eq $userrefs{$member}->{pgrp})
            {
                push(@{$userrefs{$member}->{groups}}, $gr[0]);
            }
        }
    }
    endgrent();

    return @users;
}

sub get_users_linux {
    my @users;
    my %userrefs;

    my @shadowLines = split(/\n/, `sudo cat /etc/shadow`);
    chomp(@shadowLines);

    setpwent();
    while (my @pw = getpwent())
    {
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{quota}, $user{comment}, $user{gcos}, $user{home}, $user{shell}, $user{expire}) = @pw;

        $user{pgrp} = (getgrgid($user{gid}))[0];
        $user{groups} = [];

        # We set userrefs so that we can use the grent functions to fill the groups field idiomatically
        $userrefs{$user{name}} = \%user;
        my $shadow = (grep(/^$user{name}:/, @shadowLines))[0];
        my $dummy;
        if (defined($shadow))
        {
            ($dummy, $user{password}, $user{lastchange}, $user{minage}, $user{maxage}, $user{warningperiod}, $user{inactivityperiod}, $user{expirationdate}, $user{reserved}) = split(/:/, $shadow);
        } else
        {
            $user{password} = '';
            $user{lastchange} = '';
            $user{minage} = '';
            $user{maxage} = '';
            $user{warningperiod} = '';
            $user{inactivityperiod} = '';
            $user{expirationdate} = '';
            $user{reserved} = '';
        }
        push(@users, \%user);
    }
    endpwent();
    
    setgrent();
    while (my @gr = getgrent())
    {
        for my $member (split(/\s+/, $gr[3]))
        {
            unless ($gr[0] eq $userrefs{$member}->{pgrp})
            {
                push(@{$userrefs{$member}->{groups}}, $gr[0]);
            }
        }
    }
    endgrent();
    return @users;
}

sub select_user {
    my ($user, $config) = @_;
    print "\nEnter username or search string: ";
    my $search = <>;
    chomp($search);
    my $regex = qr/$search/;

    setpwent();
    my @matches;
    setpwent();
    while(my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwent())
    {
        if ($name =~ $regex or $uid =~ $regex or $comment =~ $regex or $gcos =~ $regex)
        {
            push(@matches, {name => $name, password => $passwd, uid => $uid, gid => $gid, comment => ($gcos or $comment), home => $dir, shell => $shell});
        }
    }
    endpwent();
    system("clear");

    if (scalar(@matches) > 0)
    {
        for (my $i = 0; $i < scalar(@matches); ++$i)
        {
            my $match = $matches[$i];

            print "$i) $match->{name}\t$match->{comment}\n";
        }
        print "Select user index: ";
        my $usr_index = <>;
        chomp $usr_index;
        my $match = $matches[$usr_index];
        $user->{name} = $match->{name};
        $user->{comment} = $match->{comment};
        $user->{pgrp} = getgrgid($match->{gid});
        $user->{groups} = [];
        setgrent();
        while (my ($name, $passwd, $gid, $members) = getgrent())
        {
            my $username = $match->{name};
            if (grep(/^$username$/, split(' ', $members)))
            {
                push(@{$user->{groups}}, $name);
            }
        }
        endgrent();
    } else
    {
        print "NO MATCHES FOUND FOR SEARCH OF '$search'\n";
        print "\n\nPress enter to continue";
        my $ret = <>;
    }
}

sub view_all_users {
    my ($user, $config) = @_;

    my @users;

    @users = get_users($config);

    my @sortoptions = (['name', 'User Name'], ['comment', 'Comment Field'], ['lastchange', 'Last Password Change'], ['expirationdate', 'Days until expiration'], ['uid', 'User ID'], ['pgrp', 'Primary Group'], ['maxage', 'Max Password Age']);
    my $option;
    while ((!defined($option)) or (length($option) == 0) or (($option < 0) or ($option > $#sortoptions)))
    {
        system("clear");
        for my $i (0..$#sortoptions)
        {
            print("$i) $sortoptions[$i]->[1]\n");
        }
        print("Select sort field: ");
        $option = <>;
        chomp($option);
    }
    my $sort = $sortoptions[$option]->[0];
    my $sortdesc = $sortoptions[$option]->[1];
    my @susers = sort {
            if (((!exists($a->{$sort})) or (length($a->{$sort}) == 0)) and ((!exists($b->{$sort})) or (length($b->{$sort}) == 0)))
            {
                return 0;
            } elsif ((!exists($a->{$sort})) or (length($a->{$sort}) == 0))
            {
                return -1;
            } elsif ((!exists($b->{$sort})) or (length($b->{$sort}) == 0))
            {
                return 1;
            } else
            {
                if (($a->{$sort} =~ m/^\d+$/) and ($b->{$sort} =~ m/^\d+$/))
                {
                    return $a->{$sort} <=> $b->{$sort};
                } else
                {
                    return $a->{$sort} cmp $b->{$sort};
                }
            }
        } @users;

    $option = undef;
    print("Would you like to reverse the sort? <y/n>: ");
    $option = <>;
    chomp($option);
    if ($option =~ m/^y/i)
    {
        @susers = reverse(@susers);
    }

    system("clear");

    printf("%15.15s %25.25s %25.25s\n", 'Username', 'Comment', $sortdesc);
    printf("%15.15s %25.25s %25.25s\n", '--------', '-------', '-' x length($sortdesc));

    # Current date in days since the epoch
    my $date = int(time/86400);
    for my $user (@susers)
    {
        my %hash = %{$user};
        $hash{lastchange} = ((length($user->{lastchange}) > 0) ? sprintf('%.2f days ago', $date - $user->{lastchange}) : 'N/A');
        $hash{expirationdate} = ((length($user->{expirationdate}) > 0) ? sprintf('%.2f', $date - $user->{expirationdate}) : 'Never');
        $hash{maxage} = ((length($user->{maxage}) > 0) ? $user->{maxage} : 'None');
        printf("%15.15s %25.25s %25.25s\n", $hash{name}, $hash{comment}, $hash{$sort});
    }

    printf("%15.15s %25.25s %25.25s\n", '--------', '-------', '-' x length($sortdesc));
    printf("%15.15s %25.25s %25.25s\n", 'Username', 'Comment', $sortdesc);

    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub view_account_detail_aix {
    my ($user, $config) = @_;
    my @lsuser = split(/ /,`sudo lsuser $user->{name}`);
    my %userdetail;
    foreach my $user (@lsuser) {
        chomp;
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }
    system("clear");
    printf("%-40s%s\n", "username:", $user->{name});
    printf("%-40s%s\n", "primary group:", $userdetail{'pgrp'});
    printf("%-40s%s\n", "groups:", $userdetail{'groups'});
    printf("%-40s%s\n", "shell:", $userdetail{'shell'});
    printf("%-40s%s\n", "home:", $userdetail{'home'});
    printf("%-40s%s\n", "login:", $userdetail{'login'});
    printf("%-40s%s\n", "account locked:", $userdetail{'account_locked'});
    printf("%-40s%s\n", "unsuccessful login count:", defined($userdetail{'unsuccessful_login_count'}) ? $userdetail{'unsuccessful_login_count'} : 0);
    printf("%-40s%s\n", "last successful login:", localtime($userdetail{'time_last_login'}));
    printf("%-40s%s\n", "last unsuccessful login:", localtime($userdetail{'time_lastunsuccessful_login'}));
    printf("Press enter to continue: ");
    my $input = <>;
}

sub view_account_detail_linux {
    my ($user, $config) = @_;
    system("clear");
    print "username:    $user->{name}\n";
    print "pgroup:      $user->{pgrp}\n";
    print "groups:      " . join(', ', @{$user->{groups}}) . "\n";
    print "uid:         $user->{uid}\n";
    print "gid:         $user->{gid}\n";
    print "details:     $user->{comment}\n";
    print "home:        $user->{home}\n";
    print "shell:       $user->{shell}\n";
    print "\n";
    print "Expiry information:\n";
    print `sudo chage -l $user->{name}`;
    print "\n";
    print "Press enter to continue: ";
    my $input = <>;
}

sub change_account_detail_aix {
    my ($user, $config) = @_;
    system("clear");

    my @lsuser = split(/ /,`sudo lsuser $user->{name}`);
    my $username = shift @lsuser;
    my %userdetail;

    foreach my $user (@lsuser) {
        chomp($user);
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }

    my %details;

    my $correct = "N";

    while ( $correct !~ /[Yy]/ ) {
        %details = %userdetail;
        my $input;
        print "Modify account $username:\n";
        print "Enter nothing to keep default\n";
        print "primary group [$details{pgrp}]: ";
        $input = <>;  chomp $input;
        $details{pgrp} = $input if ($input ne "");
        print "groups [$details{groups}]: ";
        $input = <>;  chomp $input;
        $details{groups} = $input if ($input ne "");
        print "shell [$details{shell}]: ";
        $input = <>;  chomp $input;
        $details{shell} = $input if ($input ne "");
        print "home [$details{home}]:\n";
        $input = <>;  chomp $input;
        $details{home} = $input if ($input ne "");
        print "-----------------------------------------------------------\n\n";
        print "username:                 $username\n";
        print "primary group:            $details{'pgrp'}\n";
        print "groups:                   $details{'groups'}\n";
        print "shell:                    $details{'shell'}\n";
        print "home:                     $details{'home'}\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("sudo chuser 'pgrp=$details{pgrp}' 'groups=$details{groups}' 'shell=$details{shell}' 'home=$details{home}' $username");

    view_account_detail(@_);
}

sub change_account_detail_linux {
    my ($user, $config) = @_;
    system("clear");

    my $correct = "N";

    my %details;

    while ( $correct !~ /[Yy]/ ) {
        %details = %{$user};
        $details{groups} = join(',', @{$user->{groups}});

        my $input;
        print "Modify account $details{name}\n";
        print "Enter nothing to keep default\n";
        print "details [$details{comment}]: ";
        $input = <>;  chomp $input;
        $details{comment} = $input if ($input ne "");
        print "primary group [$details{pgrp}]: ";
        $input = <>;  chomp $input;
        $details{pgrp} = $input if ($input ne "");
        print "groups [$details{groups}]: ";
        $input = <>;  chomp $input;
        $details{groups} = $input if ($input ne "");
        print "shell [$details{shell}]: ";
        $input = <>;  chomp $input;
        $details{shell} = $input if ($input ne "");
        print "home [$details{home}]:";
        $input = <>;  chomp $input;
        $details{home} = $input if ($input ne "");
        print "-----------------------------------------------------------\n\n";
        print "username:                 $details{name}\n";
        print "details:                  $details{comment}\n";
        print "primary group:            $details{pgrp}\n";
        print "groups:                   $details{groups}\n";
        print "shell:                    $details{shell}\n";
        print "home:                     $details{home}\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }
    system("sudo usermod -c '$details{comment}' -d '$details{home}' -s '$details{shell}' -g '$details{pgrp}' -G '$details{groups}' $details{name}");

    $user->{comment} = $details{comment};
    $user->{home} = $details{home};
    $user->{shell} = $details{shell};
    $user->{pgrp} = $details{pgrp};
    @{$user->{groups}} = split(/,/, $details{groups});

    view_account_detail(@_);
}

sub change_account_expire_linux {
    my ($user, $config) = @_;
    system("clear");

    my $correct = "N";

    my $opts;

    while ( $correct !~ /[Yy]/ ) {
        $opts = "";

        my $input;
        print "Modify account $user->{name}\n";
        print "Enter nothing to keep old value (viewable from user account details)\n";
        print "Expire date (YYYY-MM-DD format.  -1 to disable): ";
        $input = <>;  chomp $input;
        $opts .= " -E '$input'" if ($input ne "");
        print "Number of days of inactivity after password expires to lock account (-1 to disable): ";
        $input = <>;  chomp $input;
        $opts .= " -I '$input'" if ($input ne "");
        print "Minimum number of days between password changes (0 to disable, and let password be changed at any time): ";
        $input = <>;  chomp $input;
        $opts .= " -m '$input'" if ($input ne "");
        print "Maximum number of days between password changes (-1 to disable, making a password never expire): ";
        $input = <>;  chomp $input;
        $opts .= " -M '$input'" if ($input ne "");
        print "Number of days before expiry to warn that a password is going to expire:  ";
        $input = <>;  chomp $input;
        $opts .= " -W '$input'" if ($input ne "");
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }
    system("sudo chage $opts '$user->{name}'");

    view_account_detail(@_);
}

sub reset_password_aix {
    my ($user, $config) = @_;
    print "Resetting account: $user->{name} for " . (split(/,/, $user->{comment}))[0] . "\n";
    system("sudo passwd $user->{name}");
    print "\nForce password change? (Y|N):";
    my $chpw = <>; chomp $chpw;
    if ($chpw =~ /[Nn]/) {
        system("sudo pwdadm -c $user->{name}");
    }
    unlock_account_aix(@_);
}

sub unlock_account_aix {
    my ($user, $config) = @_;
    print "Unlocking account: $user->{name} for " . (split(/,/, $user->{comment}))[0] . "\n";
    system("sudo chuser unsuccessful_login_count=0 account_locked=false $user->{name}");
    print "\nUser Successfully Unlocked!\n";
    print "\nPress Enter to Continue\n";
    my $v = <>;
}
sub reset_password_linux {
    my ($user, $config) = @_;
    print "Resetting account: $user->{name} for $user->{comment}\n";
    system("sudo passwd $user->{name}");
    unlock_account_linux(@_);
}

sub unlock_account_linux {
    my ($user, $config) = @_;
    print "Unlocking account: $user->{name} for $user->{comment}\n";
    system("sudo passwd -u $user->{name}");
    system("sudo chage -d " . localtime->strftime('%F') . " $user->{name}");
    print "\nUser Successfully Unlocked!\n";
    print "\nPress Enter to Continue\n";
    my $v = <>;
}

sub create_user_account {
    my ($user, $config) = @_;
    system("clear");
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    while ( $correct !~ /[Yy]/ ) {
        print "Create new account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;
        print "\n\n-----------------------------------------------------------\n\n";
        print "Please confim user details:\n";
        print "-----------------------------------------------------------\n\n";
        print "Username:  $username\n";
        print "Fullname:  $fullname\n";
        print "Phone:     $phone\n";
        print "Location:  $location\n";
        print "Business:  $business\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("clear");
    print "Creating account $username for $fullname ...\n";

    my @opts;
    if ($config->{user}->{sharedhome})
    {
        push(@opts, ['d', $config->{user}->{home}]);
    } else
    {
        push(@opts, ['d', "$config->{user}->{home}/$username"]);
        push(@opts, ['m']);
    }

    if (exists($config->{user}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{user}->{groups}})]);
    }

    push(@opts, ['g', $config->{user}->{pgrp}]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, $username);

    system('sudo useradd ' . buildopts(\@opts));

    system("sudo passwd $username");
    print "\n\nAccount creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub create_admin_account {
    my ($user, $config) = @_;
    system("clear");
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    while ( $correct !~ /[Yy]/ ) {
        print "Create new account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;
        print "\n\n-----------------------------------------------------------\n\n";
        print "Please confim user details:\n";
        print "-----------------------------------------------------------\n\n";
        print "Username:  $username\n";
        print "Fullname:  $fullname\n";
        print "Phone:     $phone\n";
        print "Location:  $location\n";
        print "Business:  $business\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("clear");
    print "Creating account $username for $fullname ...\n";

    my @opts;
    if ($config->{admin}->{sharedhome})
    {
        push(@opts, ['d', $config->{admin}->{home}]);
    } else
    {
        push(@opts, ['d', "$config->{admin}->{home}/$username"]);
        push(@opts, ['m']);
    }

    if (exists($config->{admin}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{admin}->{groups}})]);
    }

    push(@opts, ['g', $config->{admin}->{pgrp}]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, $username);

    system('sudo useradd ' . buildopts(\@opts));

    system("sudo passwd $username");
    print "\n\nAccount creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub create_sftp_account_linux {
    my ($user, $config) = @_;
    system("clear");
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    while ( $correct !~ /[Yy]/ ) {
        print "Create new SFTP account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;
        print "\n\n-----------------------------------------------------------\n\n";
        print "Please confim user details:\n";
        print "-----------------------------------------------------------\n\n";
        print "Username:  $username\n";
        print "Fullname:  $fullname\n";
        print "Phone:     $phone\n";
        print "Location:  $location\n";
        print "Business:  $business\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("clear");
    print "Creating SFTP account $username for $fullname ...\n";

    my @opts;
    my $homedir;
    if ($config->{ftpuser}->{sharedhome})
    {
        $homedir = $config->{ftpuser}->{home};
        push(@opts, ['d', $homedir]);
    } else
    {
        $homedir = "$config->{ftpuser}->{home}/$username";
        push(@opts, ['d', $homedir]);
        push(@opts, ['m']);
    }

    if (exists($config->{ftpuser}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{ftpuser}->{groups}})]);
    }

    my $ftpgrp = $config->{ftpuser}->{pgrp};

    push(@opts, ['g', $ftpgrp]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, ['s', '/sbin/nologin']);
    push(@opts, $username);


    system('sudo useradd ' . buildopts(\@opts));


    system('sudo useradd ' . buildopts(\@opts));
    system('sudo chown ' . buildopts(["root:$ftpgrp", $homedir]));
    system('sudo chmod ' . buildopts([755, $homedir]));

    my $filesdir = "$homedir/files";

    system('sudo mkdir ' . buildopts([$filesdir]));
    system('sudo chown ' . buildopts(["$username:$ftpgrp", $filesdir]));
    system('sudo chmod ' . buildopts([700, $filesdir]));
    system('sudo setfacl ' . buildopts([['m', "u:$username:rwx"], $filesdir]));
    system('sudo setfacl ' . buildopts([['d'], ['m', "u:$username:rwx"], $filesdir]));
    system('sudo setfacl ' . buildopts([['m', "g:$ftpgrp:rwx"], $filesdir]));
    system('sudo setfacl ' . buildopts([['d'], ['m', "g:$ftpgrp:rwx"], $filesdir]));
    system('sudo setfacl ' . buildopts([['m', "g:$config->{admin}->{group}:rwx"], $filesdir]));
    system('sudo setfacl ' . buildopts([['d'], ['m', "g:$config->{admin}->{group}:rwx"], $filesdir]));

    system("sudo passwd $username");

    print "\n\nSFTP account creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub delete_account {
    my ($user, $config) = @_;
    system("clear");
    print "##################################################################\n";
    print "ABOUT TO REMOVE USER ACCCOUNT!!!\n";
    print "##################################################################\n\n";

    print "Enter Y to confirm account removal for user $user->{name}: ";
    my $con = <>; chomp $con;
    if ($con eq "Y") {
        system("sudo userdel $user->{name}");
        print "\n\nUser: $user->{name} removed from $config->{OS}.\n";
        %{$user} = ();
    }
    else {
        print "\n\nYou did not enter Y, returning to main menu without removing user.\n";
    }
    print "\nPress enter to continue ";
    my $ret = <>;
}

sub parsestanzas {
    my $filename = $_[0];
    my %output;
    my $stanza = 'default';

    open(my $file, '-|', "sudo cat $filename");
    while (my $line = <$file>)
    {
        chomp($line);
        if ($line =~ m/^([^\s#\*]+):\s*$/)
        {
            $stanza = $1;
        } elsif ($line =~ m/^\s+(\S+)\s*=\s*(.*)$/)
        {
            $output{$stanza}{$1} = $2;
        }
    }
    close($file);

    return %output;
}

sub quit {
    my ($user, $config) = @_;
    $config->{exit} = 1;
}
