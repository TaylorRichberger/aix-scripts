#!/usr/bin/perl
use warnings;
use strict;
use Time::Piece;
use POSIX;
use JSON;
use Term::Menu;

sub ParseConfig($);

sub main;
sub dispatch;
sub clear;
sub pause;
sub buildopts;
sub change_account_detail;
sub change_account_detail_aix;
sub change_account_detail_linux;
sub change_account_expire;
sub change_account_expire_linux;
sub create_admin_account;
sub create_sftp_account_linux;
sub create_user_account;
sub delete_account;
sub get_users;
sub get_users_aix;
sub get_users_linux;
sub reset_password_aix;
sub reset_password_linux;
sub select_user;
sub unlock_account_aix;
sub unlock_account_linux;
sub unselect_user;
sub view_account_detail_aix;
sub view_account_detail_linux;
sub view_all_users;

# Parse stanzas into a hash of hashes
sub parsestanzas;
sub quit;

main();

sub ParseConfig($) {
    my $location = $_[0];
    my $data;
    local $/ = undef;
    open(my $file, '<', $location) or return {menu => []};
    binmode $file;
    my $json = <$file>;
    return decode_json($json);
}

sub main {
    my $config = ParseConfig('/etc/manage_users.json');
    push(@{$config->{menu}}, 'quit');

    $config->{exit} = 0;
    my %data;

    my %allroutines = (
        change_account_detail => 'Change User Account Details',
        change_account_expire => 'Change User Account Password Expiry',
        create_admin_account => 'Create Admin Account',
        create_sftp_account => 'Create Client Account',
        create_user_account => 'Create User Account',
        delete_account => 'Remove User Account',
        quit => 'Exit',
        reset_password => 'Reset Password and Unlock Account',
        select_user => 'Select User',
        unlock_account => 'Unlock Account Without Resetting Password',
        unselect_user => 'Unselect User',
        view_account_detail => 'View User Account Details',
        view_all_users => 'View All Users'
    );
    my @routines;

    my $i = 0;
    for my $item (@{$config->{menu}})
    {
        if (exists($allroutines{$item}))
        {
            my $display = $allroutines{$item};
            push(@routines, $item);
            push(@routines, [$display, ++$i]);
        } else
        {
            print("Could not find requested routine $item!  You are missing functionality!\n");
            pause();
        }
    }

    while (!$config->{exit})
    {
        clear();

        my $prompt;
        if (exists($data{user})) {
            $prompt = Term::Menu->new(beforetext => "Selected User:  $data{user}->{name} => $data{user}->{comment}", aftertext=> "Choose an option: ");
        } else {
            $prompt = Term::Menu->new(beforetext => "No user selected!  Please create or select a user to proceed", aftertext=> "Choose an option: ");
        }

        my $routine = $prompt->menu(@routines);

        dispatch($routine, \%data, $config);
        pause();
    }
}

sub dispatch {
    my ($function, $data, $config) = @_;
    my %dispatch = (
        change_account_detail => {AIX => \&change_account_detail_aix, Linux => \&change_account_detail_linux},
        change_account_expire => {Linux => \&change_account_expire_linux},
        create_admin_account => {DEFAULT => \&create_admin_account},
        create_sftp_account => {Linux => \&create_sftp_account_linux},
        create_user_account => {DEFAULT => \&create_user_account},
        delete_account => {DEFAULT => \&delete_account},
        reset_password => {AIX => \&reset_password_aix, Linux => \&reset_password_linux},
        select_user => {DEFAULT => \&select_user},
        unlock_account => {AIX => \&unlock_account_aix, Linux => \&unlock_account_linux},
        unselect_user => {DEFAULT => \&unselect_user},
        view_account_detail => {AIX => \&view_account_detail_aix, Linux => \&view_account_detail_linux},
        view_all_users => {DEFAULT => \&view_all_users},
        quit => {DEFAULT => \&quit},
    );
    my %needs = (
        change_account_detail => [qw(user)],
        change_account_expire => [qw(user)],
        delete_account => [qw(user)],
        reset_password => [qw(user)],
        unlock_account => [qw(user)],
        unselect_user => [qw(user)],
        view_account_detail => [qw(user)]
    );

    my $os = $config->{OS};

    if (exists($dispatch{$function}))
    {
        if (exists($needs{$function}))
        {
            for my $need (@{$needs{$function}})
            {
                return if (not exists($data->{$need}));
            }
        }
        if (exists($dispatch{$function}->{$os}))
        {
            $dispatch{$function}->{$os}->($data, $config);
        } elsif (exists($dispatch{$function}->{DEFAULT}))
        {
            $dispatch{$function}->{DEFAULT}->($data, $config);
        }
    }
}

sub clear {
    system("clear");
}

sub pause {
    Term::Menu->new()->question('Press enter to continue');
    return;
}

sub buildopts {
    my @singles;
    my @argopts;
    my @args;

    for my $opt (@_)
    {
        if (ref($opt) eq 'ARRAY')
        {
            if (scalar(@{$opt} > 1))
            {
                # Make sure all single-quotes are escaped and everything else is properly captured
                my $optarg = $opt->[1];
                $optarg =~ s/'/'"'"'/g;
                push(@argopts, "-$opt->[0]", "'$optarg'");
            } else
            {
                push(@singles, $opt->[0]);
            }
        } else
        {
            my $arg = $opt;
            $arg =~ s/'/'"'"'/g;
            push(@args, "'$arg'");
        }
    }
    my @outstrings;

    if (scalar(@singles) > 0)
    {
        push(@outstrings, '-' . join('', @singles));
    }

    push(@outstrings, @argopts);
    push(@outstrings, @args);
    return join(' ', @outstrings);
}

sub get_users {
    my ($config) = @_;
    my %dispatch = (
        AIX => \&get_users_aix,
        Linux => \&get_users_linux
    );

    if (exists($dispatch{$config->{OS}}))
    {
        $dispatch{$config->{OS}}->();
    } else
    {
        print("There is no get_users function for OS $config->{OS}, this is a bug in the program or deployment.\n");
        pause();
    }
}

# AIX get users
sub get_users_aix {

    my @users;
    my %userrefs;

    my %secpasswd = parsestanzas('/etc/security/passwd');
    my %secuser = parsestanzas('/etc/security/user');

    setpwent();
    while (my @pw = getpwent())
    {
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{quota}, $user{comment}, $user{gcos}, $user{home}, $user{shell}, $user{expire}) = @pw;
        $user{comment} ||= $user{gcos};

        $user{pgrp} = (getgrgid($user{gid}))[0];
        $user{groups} = [];

        # We set userrefs so that we can use the grent functions to fill the groups field idiomatically
        $userrefs{$user{name}} = \%user;

        if (defined($secpasswd{$user{name}}) && defined($secpasswd{$user{name}}{lastupdate}) && ($secpasswd{$user{name}}{lastupdate} =~ m/^\d+$/))
        {
            $user{lastchange} = $secpasswd{$user{name}}{lastupdate} / (60 * 60 * 24);
        } else
        {
            $user{lastchange} = '';
        }

        if (defined($secuser{$user{name}}) && defined($secuser{$user{name}}{maxage}) && ($secuser{$user{name}}{maxage} =~ m/^\d+$/))
        {
            $user{maxage} = $secuser{$user{name}}{maxage};
        } else
        {
            $user{maxage} = 0;
        }

        # Day of password expiration
        $user{expirationdate} = '';
        if ($user{maxage} > 0)
        {
            # Calculate the day of expiration
            $user{expirationdate} = (($user{maxage} * 7) + $user{lastchange})
        }

        $user{reserved} = '';
        push(@users, \%user);
    }
    endpwent();

    setgrent();
    while (my @gr = getgrent())
    {
        for my $member (split(/\s+/, $gr[3]))
        {
            unless ($gr[0] eq $userrefs{$member}->{pgrp})
            {
                push(@{$userrefs{$member}->{groups}}, $gr[0]);
            }
        }
    }
    endgrent();

    return @users;
}

sub get_users_linux {
    my @users;
    my %userrefs;

    my @shadowLines = split(/\n/, `cat /etc/shadow`);
    chomp(@shadowLines);

    setpwent();
    while (my @pw = getpwent())
    {
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{quota}, $user{comment}, $user{gcos}, $user{home}, $user{shell}, $user{expire}) = @pw;
        $user{comment} ||= $user{gcos};

        $user{pgrp} = (getgrgid($user{gid}))[0];
        $user{groups} = [];

        # We set userrefs so that we can use the grent functions to fill the groups field idiomatically
        $userrefs{$user{name}} = \%user;
        my $shadow = (grep(/^$user{name}:/, @shadowLines))[0];
        my $dummy;
        if (defined($shadow))
        {
            ($dummy, $user{password}, $user{lastchange}, $user{minage}, $user{maxage}, $user{warningperiod}, $user{inactivityperiod}, $user{expirationdate}, $user{reserved}) = split(/:/, $shadow);
        } else
        {
            $user{password} = '';
            $user{lastchange} = '';
            $user{minage} = '';
            $user{maxage} = '';
            $user{warningperiod} = '';
            $user{inactivityperiod} = '';
            $user{expirationdate} = '';
            $user{reserved} = '';
        }
        push(@users, \%user);
    }
    endpwent();
    
    setgrent();
    while (my @gr = getgrent())
    {
        for my $member (split(/\s+/, $gr[3]))
        {
            unless ($gr[0] eq $userrefs{$member}->{pgrp})
            {
                push(@{$userrefs{$member}->{groups}}, $gr[0]);
            }
        }
    }
    endgrent();
    return @users;
}

sub select_user {
    my ($data, $config, $username) = @_;
    my $user;
    if (defined($username))
    {
        my @matches = grep({$_->{name} eq $username} get_users($config));
        $user = $matches[0];
    } else
    {
        my $prompt = Term::Menu->new(beforetext => 'Select user', aftertext=> 'Choose an option: ');
        my $search = $prompt->question('Enter username or search string: ');
        chomp($search);

        my $regex = qr/$search/i;

        my @matches = grep({$_->{name} =~ $regex or $_->{comment} =~ $regex or $_->{uid} =~ $regex or $_->{home} =~ $regex} get_users($config));

        if (scalar(@matches) < 1)
        {
            print("NO MATCHES FOUND FOR SEARCH OF '$search'\n");
            return;
        } elsif (scalar(@matches) == 1)
        {
            $user = $matches[0];
        } else
        {
            clear();
            my @menu;
            for (my $i = 0; $i < scalar(@matches); ++$i)
            {
                my $match = $matches[$i];

                push(@menu, $match);
                push(@menu, ["$match->{name}\t$match->{comment}", $i + 1]);
            }
            $user = $prompt->menu(@menu);
        }
    }

    $data->{user} = $user;

    $user->{pgrp} = getgrgid($user->{gid});
    $user->{groups} = [];
    setgrent();
    while (my ($name, $passwd, $gid, $members) = getgrent())
    {
        my $username = $user->{name};

        if (grep(/^$username$/, split(' ', $members)))
        {
            push(@{$user->{groups}}, $name);
        }
    }
    endgrent();
}

sub view_all_users {
    my ($data, $config) = @_;
    clear();
    my $prompt = Term::Menu->new(beforetext => 'Select sort');

    my @users;

    @users = get_users($config);

    my @sortoptions = (['name', 'User Name'], ['comment', 'Comment Field'], ['lastchange', 'Last Password Change'], ['expirationdate', 'Days Until Expiration'], ['uid', 'User ID'], ['pgrp', 'Primary Group'], ['maxage', 'Max Password Age']);

    my @sorts;
    for my $option (@sortoptions)
    {
        push(@sorts, $option);
        push(@sorts, [$option->[1], substr($option->[0], 0, 1)]);
    }
    my $sortoption = $prompt->menu(@sorts);
    my $sort = $sortoption->[0];
    my $sortdesc = $sortoption->[1];
    my @susers = sort {
            if (((!exists($a->{$sort})) or (length($a->{$sort}) == 0)) and ((!exists($b->{$sort})) or (length($b->{$sort}) == 0)))
            {
                return 0;
            } elsif ((!exists($a->{$sort})) or (length($a->{$sort}) == 0))
            {
                return -1;
            } elsif ((!exists($b->{$sort})) or (length($b->{$sort}) == 0))
            {
                return 1;
            } else
            {
                if (($a->{$sort} =~ m/^\d+$/) and ($b->{$sort} =~ m/^\d+$/))
                {
                    return $a->{$sort} <=> $b->{$sort};
                } else
                {
                    return $a->{$sort} cmp $b->{$sort};
                }
            }
        } @users;

    my $option = Term::Menu->new(beforetext => 'Would you like to reverse the sort?', aftertext => ' > ')->menu(1 => ['Yes', 'y'], 0 => ['No', 'n']);
    chomp($option);
    if ($option)
    {
        @susers = reverse(@susers);
    }

    clear();

    my @list;
    # Current date in days since the epoch
    my $date = int(time/86400);
    for my $user (@susers)
    {
        my %hash = %{$user};
        $hash{lastchange} = ((length($user->{lastchange}) > 0) ? sprintf('%.2f days ago', $date - $user->{lastchange}) : 'N/A');
        $hash{expirationdate} = ((length($user->{expirationdate}) > 0) ? sprintf('%.2f', $date - $user->{expirationdate}) : 'Never');
        $hash{maxage} = ((length($user->{maxage}) > 0) ? $user->{maxage} : 'None');
        push(@list, [$hash{name}, $hash{comment}, $hash{$sort}]);
    }

    $prompt->table(['Username', 'Comment', $sortdesc], \@list);
}

sub view_account_detail_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    my @lsuser = split(/ /,`lsuser $user->{name}`);
    my %userdetail;
    foreach my $user (@lsuser) {
        chomp;
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }
    clear();
    Term::Menu->new()->table(['item', 'value'], [
    ['username', $user->{name}],
    ['primary group', $userdetail{'pgrp'}],
    ['groups', $userdetail{'groups'}],
    ['shell', $userdetail{'shell'}],
    ['home', $userdetail{'home'}],
    ['login', $userdetail{'login'}],
    ['account locked', $userdetail{'account_locked'}],
    ['unsuccessful login count', defined($userdetail{'unsuccessful_login_count'}) ? $userdetail{'unsuccessful_login_count'} : 0],
    ['last successful login', defined($userdetail{'time_last_login'}) ? strftime('%F %T', localtime($userdetail{'time_last_login'})) : 'never'],
    ['last unsuccessful login', defined($userdetail{'time_last_unsuccessful_login'}) ? strftime('%F %T', localtime($userdetail{'time_last_unsuccessful_login'})) : 'never']]);
}

sub view_account_detail_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();
    my @items = (
        ['username', $user->{name}],
        ['pgroup', $user->{pgrp}],
        ['uid', $user->{uid}],
        ['gid', $user->{gid}],
        ['details', $user->{comment}],
        ['home', $user->{home}],
        ['shell', $user->{shell}],
        ['last password change', strftime('%a, %d %b %Y', gmtime($user->{lastchange} * 24 * 60 * 60))],
        ['minimum password age', $user->{minage} || 'N/A'],
        ['maximum password age', $user->{maxage} || 'N/A'],
        ['warning period', $user->{warningperiod} || 'N/A'],
        ['inactivity period', $user->{inactivityperiod} || 'N/A'],
        ['account expiration date', (defined($user->{expirationdate}) && length($user->{expirationdate}) > 0) ? strftime('%a, %d %b %Y', gmtime($user->{expirationdate} * 24 * 60 * 60)) : 'N/A']
    );
    Term::Menu->new()->table(['item', 'value'], \@items);
    Term::Menu->new()->table(['group'], [map({ [$_] }  @{$user->{groups}})]);
}

sub change_account_detail_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();

    my @lsuser = split(/ /,`lsuser $user->{name}`);
    my $username = shift @lsuser;
    my %userdetail;

    foreach my $user (@lsuser) {
        chomp($user);
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }

    my %details;

    my $correct = 0;

    my $prompt = Term::Menu->new(beforetext => 'Is this correct?', aftertext=> ' > ');

    while (not $correct) {
        %details = %userdetail;
        my $input;
        print("Modify account $username:\n");
        print("Enter nothing to keep default\n");
        $input = $prompt->question("primary group [$details{pgrp}]: ");
        chomp($input);
        $details{pgrp} = $input if ($input ne "");
        $input = $prompt->question("groups [$details{groups}]: ");
        chomp $input;
        $details{groups} = $input if ($input ne "");
        $input = $prompt->question("shell [$details{shell}]: ");
        chomp $input;
        $details{shell} = $input if ($input ne "");
        $input = $prompt->question("home [$details{home}]: ");
        chomp $input;
        $details{home} = $input if ($input ne "");
        $prompt->table(['item', 'value'], [
                ['username', $username],
                ['primary group', $details{pgrp}],
                ['groups', $details{groups}],
                ['shell', $details{shell}],
                ['home', $details{home}]]);
        $correct = $prompt->menu(1 => ['Yes', 'y'], 0 => ['No', 'n'], 2 => ['Cancel', 'c']);
        return if ($correct == 2);
    }
    system('chuser ' . buildopts("pgrp=$details{pgrp}", "groups=$details{groups}", "shell=$details{shell}", "home=$details{home}", $username));

    select_user(@_, $details{name});

    view_account_detail_aix(@_);
}

sub change_account_detail_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();

    my $correct = 0;

    my %details;

    my $prompt = Term::Menu->new(beforetext => 'Is this correct?', aftertext=> ' > ');

    while (not $correct) {
        %details = %{$user};
        $details{groups} = join(',', @{$user->{groups}});

        my $input;
        print("Modify account $details{name}\n");
        print("Enter nothing to keep default\n");
        $input = $prompt->question("details [$details{comment}]: ");
        chomp $input;
        $details{comment} = $input if ($input ne "");
        $input = $prompt->question("primary group [$details{pgrp}]: ");
        chomp $input;
        $details{pgrp} = $input if ($input ne "");
        $input = $prompt->question("groups [$details{groups}]: ");
        chomp $input;
        $details{groups} = $input if ($input ne "");
        $input = $prompt->question("shell [$details{shell}]: ");
        chomp $input;
        $details{shell} = $input if ($input ne "");
        $input = $prompt->question("home [$details{home}]: ");
        chomp $input;
        $details{home} = $input if ($input ne "");
        $prompt->table(['item', 'value'], [
            ['username', $details{name}],
            ['details', $details{comment}],
            ['primary group', $details{pgrp}],
            ['groups', $details{groups}],
            ['shell', $details{shell}],
            ['home', $details{home}]]);
        $correct = $prompt->menu(1 => ['Yes', 'y'], 0 => ['No', 'n'], 2 => ['Cancel', 'c']);
        return if ($correct == 2);
    }
    system('usermod ' . buildopts($details{name},
                ['c', $details{comment}],
                ['d', $details{home}],
                ['s', $details{shell}],
                ['g', $details{pgrp}],
                ['G', $details{groups}]));

    select_user(@_, $details{name});

    view_account_detail_linux(@_);
    return;
}

sub change_account_expire_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};

    my $correct = 0;

    my $prompt = Term::Menu->new(beforetext => 'Is this correct?', aftertext=> ' > ');

    my %details;
    while (not $correct) {
        clear();
        %details = %{$user};
        $details{minage} = $user->{minage} || 0;
        $details{maxage} = $user->{maxage} || -1;
        $details{warningperiod} = $user->{warningperiod} || 0;
        $details{inactivityperiod} = $user->{inactivityperiod} || -1;
        $details{expirationdate} = (defined($user->{expirationdate}) && length($user->{expirationdate}) > 0) ? strftime('%Y-%m-%d', gmtime($user->{expirationdate} * 24 * 60 * 60)) : -1;

        my $input;
        print("Modify account $user->{name}\n");
        print("Enter nothing to keep old value\n");
        $input = $prompt->question("Expire date (YYYY-MM-DD format.  -1 to disable) [$details{expirationdate}]: ");
        chomp $input;
        $details{expirationdate} = $input if ($input ne "");

        $input = $prompt->question("Number of days of inactivity after password expires to lock account (-1 to disable) [$details{inactivityperiod}]: ");
        chomp $input;
        $details{inactivityperiod} = $input if ($input ne "");

        $input = $prompt->question("Minimum number of days between password changes (0 to disable, and let password be changed at any time) [$details{minage}]: ");
        chomp $input;
        $details{minage} = $input if ($input ne "");

        $input = $prompt->question("Maximum number of days between password changes (-1 to disable, making a password never expire) [$details{maxage}]: ");
        chomp $input;
        $details{maxage} = $input if ($input ne "");

        $input = $prompt->question("Number of days before expiry to warn that a password is going to expire [$details{warningperiod}]:  ");
        chomp $input;
        $details{warningperiod} = $input if ($input ne "");

        $prompt->table(['item', 'value'], [
            ['expiration date', $details{expirationdate}],
            ['inactivity period', $details{inactivityperiod}],
            ['minimum age', $details{minage}],
            ['maximum age', $details{maxage}],
            ['warning period', $details{warningperiod}]]);

        $correct = $prompt->menu(1 => ['Yes', 'y'], 0 => ['No', 'n'], 2 => ['Cancel', 'c']);
        return if ($correct == 2);
    }
    system('chage ' . buildopts($details{name},
                ['E', $details{expirationdate}],
                ['I', $details{inactivityperiod}],
                ['m', $details{minage}],
                ['M', $details{maxage}],
                ['W', $details{warningperiod}]));

    select_user(@_, $details{name});

    view_account_detail_linux(@_);
    return;
}

sub reset_password_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print("Resetting account: $user->{name} for " . (split(/,/, $user->{comment}))[0] . "\n");
    system("passwd $user->{name}");
    my $chpw = Term::Menu->new(beforetext => 'Force password change?', aftertext => ' > ')->menu(1 => ['Yes', 'y'], 0 => ['No', 'n']);
    if (not $chpw) {
        system("sudo pwdadm -c $user->{name}");
    }
    unlock_account_aix(@_);
}

sub unlock_account_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print("Unlocking account: $user->{name} for " . (split(/,/, $user->{comment}))[0] . "\n");
    system("chuser unsuccessful_login_count=0 account_locked=false $user->{name}");
    print("\nUser Successfully Unlocked!\n");
}
sub reset_password_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print("Resetting account: $user->{name} for $user->{comment}\n");
    system("passwd $user->{name}");
    unlock_account_linux(@_);
}

sub unlock_account_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print("Unlocking account: $user->{name} for $user->{comment}\n");
    system("passwd -u $user->{name}");
    system('chage ' . buildopts($user->{name}, ['d', strftime('%F', localtime(time))]));
    print("\nUser Successfully Unlocked!\n");
}

sub create_user_account {
    my ($data, $config) = @_;
    my $correct = 0;
    my ($username, $fullname, $phone, $location, $business);
    my $prompt = Term::Menu->new(beforetext => 'Is this correct?', aftertext=> ' > ');
    while (not $correct) {
        clear();
        $username = $prompt->question("Username: ");
        chomp $username;
        $fullname = $prompt->question("Full Name: ");
        chomp $fullname;
        $phone = $prompt->question("Enter Phone Number: ");
        chomp $phone;
        $location = $prompt->question("Enter Location: ");
        chomp $location;
        $business = $prompt->question("Enter Business Unit: ");
        chomp $business;

        $prompt->table(['item', 'value'], [
            ['Username', $username],
            ['Fullname', $fullname],
            ['Phone', $phone],
            ['Location', $location],
            ['Business unit', $business]]);
        $correct = $prompt->menu(1 => ['Yes', 'y'], 0 => ['No', 'n'], 2 => ['Cancel', 'c']);
        return if ($correct == 2);
    }
    clear();
    print("Creating account $username for $fullname ...\n");

    my @opts;
    if ($config->{user}->{sharedhome})
    {
        push(@opts, ['d', $config->{user}->{home}]);
    } else
    {
        push(@opts, ['d', "$config->{user}->{home}/$username"]);
        push(@opts, ['m']);
    }

    if (exists($config->{user}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{user}->{groups}})]);
    }

    push(@opts, ['g', $config->{user}->{pgrp}]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, $username);

    system('useradd ' . buildopts(@opts));

    system("passwd $username");

    print("\n\nAccount creation complete.\n");

    select_user(@_, $username);
}

sub create_admin_account {
    my ($data, $config) = @_;
    my $correct = 0;
    my ($username, $fullname, $phone, $location, $business);
    my $prompt = Term::Menu->new(beforetext => 'Is this correct?', aftertext=> ' > ');
    while (not $correct) {
        clear();
        $username = $prompt->question("Username: ");
        chomp $username;
        $fullname = $prompt->question("Full Name: ");
        chomp $fullname;
        $phone = $prompt->question("Enter Phone Number: ");
        chomp $phone;
        $location = $prompt->question("Enter Location: ");
        chomp $location;
        $business = $prompt->question("Enter Business Unit: ");
        chomp $business;

        $prompt->table(['item', 'value'], [
            ['Username', $username],
            ['Fullname', $fullname],
            ['Phone', $phone],
            ['Location', $location],
            ['Business unit', $business]]);
        $correct = $prompt->menu(1 => ['Yes', 'y'], 0 => ['No', 'n'], 2 => ['Cancel', 'c']);
        return if ($correct == 2);
    }
    clear();
    print("Creating account $username for $fullname ...\n");

    my @opts;
    if ($config->{admin}->{sharedhome})
    {
        push(@opts, ['d', $config->{admin}->{home}]);
    } else
    {
        push(@opts, ['d', "$config->{admin}->{home}/$username"]);
        push(@opts, ['m']);
    }

    if (exists($config->{admin}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{admin}->{groups}})]);
    }

    push(@opts, ['g', $config->{admin}->{pgrp}]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, $username);

    system('useradd ' . buildopts(@opts));

    system("passwd $username");
    print("\n\nAccount creation complete.\n");
}

sub create_sftp_account_linux {
    my ($data, $config) = @_;
    my $correct = 0;
    my ($username, $fullname, $phone, $location, $business);
    my $prompt = Term::Menu->new(beforetext => 'Is this correct?', aftertext=> ' > ');
    while (not $correct) {
        clear();
        $username = $prompt->question("Username: ");
        chomp $username;
        $fullname = $prompt->question("Full Name: ");
        chomp $fullname;
        $phone = $prompt->question("Enter Phone Number: ");
        chomp $phone;
        $location = $prompt->question("Enter Location: ");
        chomp $location;
        $business = $prompt->question("Enter Business Unit: ");
        chomp $business;

        $prompt->table(['item', 'value'], [
            ['Username', $username],
            ['Fullname', $fullname],
            ['Phone', $phone],
            ['Location', $location],
            ['Business unit', $business]]);
        $correct = $prompt->menu(1 => ['Yes', 'y'], 0 => ['No', 'n'], 2 => ['Cancel', 'c']);
        return if ($correct == 2);
    }
    clear();
    print("Creating account $username for $fullname ...\n");

    my @opts;
    my $homedir;
    if ($config->{ftpuser}->{sharedhome})
    {
        $homedir = $config->{ftpuser}->{home};
        push(@opts, ['d', $homedir]);
    } else
    {
        $homedir = "$config->{ftpuser}->{home}/$username";
        push(@opts, ['d', $homedir]);
        push(@opts, ['m']);
    }

    if (exists($config->{ftpuser}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{ftpuser}->{groups}})]);
    }

    my $ftpgrp = $config->{ftpuser}->{pgrp};

    push(@opts, ['g', $ftpgrp]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, ['s', '/sbin/nologin']);
    push(@opts, $username);


    system('useradd ' . buildopts(@opts));


    system('useradd ' . buildopts(@opts));
    system('chown ' . buildopts("root:$ftpgrp", $homedir));
    system('chmod ' . buildopts(755, $homedir));

    my $filesdir = "$homedir/files";

    system('mkdir ' . buildopts($filesdir));
    system('chown ' . buildopts("$username:$ftpgrp", $filesdir));
    system('chmod ' . buildopts(700, $filesdir));
    system('setfacl ' . buildopts(['m', "u:$username:rwx"], $filesdir));
    system('setfacl ' . buildopts(['d'], ['m', "u:$username:rwx"], $filesdir));
    system('setfacl ' . buildopts(['m', "g:$ftpgrp:rwx"], $filesdir));
    system('setfacl ' . buildopts(['d'], ['m', "g:$ftpgrp:rwx"], $filesdir));
    system('setfacl ' . buildopts(['m', "g:$config->{admin}->{group}:rwx"], $filesdir));
    system('setfacl ' . buildopts(['d'], ['m', "g:$config->{admin}->{group}:rwx"], $filesdir));

    system("passwd $username");

    print("\n\nSFTP account creation complete.\n");
}

sub delete_account {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();
    print("##################################################################\n");
    print("ABOUT TO REMOVE USER ACCOUNT!!!\n");
    print("##################################################################\n\n");

    my $con = Term::Menu->new(beforetext => "Would you like to permanently delete user $user->{name}?", aftertext => ' > ')->menu(1 => ['Yes', 'y'], 0 => ['No', 'n']);
    if ($con) {
        system("userdel $user->{name}");
        print("User: $user->{name} removed from $config->{OS}.\n");
        delete($data->{user});
    } else {
        print("User $user->{name} not deleted.\n");
    }
}

sub unselect_user {
    my ($data, $config) = @_;
    my $username = $data->{user}->{name};
    delete($data->{user});
    print("Unselected user $username\n");
}

sub parsestanzas {
    my $filename = $_[0];
    my %output;
    my $stanza = 'default';

    open(my $file, '<', $filename);
    while (my $line = <$file>)
    {
        chomp($line);
        if ($line =~ m/^([^\s#\*]+):\s*$/)
        {
            $stanza = $1;
        } elsif ($line =~ m/^\s+(\S+)\s*=\s*(.*)$/)
        {
            $output{$stanza}{$1} = $2;
        }
    }

    return %output;
}

sub quit {
    my ($data, $config) = @_;
    $config->{exit} = 1;
}
