#!/usr/bin/perl
use warnings;
use strict;
use Data::Dumper;
use Time::Piece;

# Boolean value that represents whether this is a FACS system, otherwise it is assumed to be CUBS.
my $isFacs = (-d "/cache");

sub menu;
sub cubs_user;
sub get_users;
sub sel_user;
sub view_all_users;
sub acct_detail;
sub chg_acct_detail;
sub fix_acct;
sub unlock_acct;
sub create_acct;
sub create_sftp_acct;
sub rm_acct;
sub acct_detail_linux;
sub chg_acct_detail_linux;
sub chg_acct_expire_linux;
sub fix_acct_linux;
sub unlock_acct_linux;
sub quit;

my $ijs = '';
# Allow user creation?
my $allowcreate = 1;
# default account stuff
my $pgrp = "users";
my $ftpgrp = "cubs";
my $home = "/home";
my $ftphome = "/home/ftp";
my $sharedhome = 0;
my $OS = $^O;

my %user;

while (1)
{
    menu();
}

sub menu {
    system("clear");

    if (exists($user{name})) {
        print "Selected User:  $user{name} => $user{comment}\n";
        print "------------------------------------------------------------------\n\n";
    }
    else {
        print "No user selected!  Please create or select a user to proceed\n";
        print "------------------------------------------------------------------\n\n";
    }
    my @routines;

    # routines are loaded as a list of hashes.  Description is self-explanatory, needsUser routines will only run if a user is selected,
    # routine contains a code reference to a sub or a lambda.  This allows routines to be easily and flexibly added and removed.
    push(@routines, { description => "Select User", needsUser => 0, routine => \&sel_user });
    push(@routines, { description => "Create user account", needsUser => 0, routine => \&create_acct });
    push(@routines, { description => "Create client account", needsUser => 0, routine => \&create_sftp_acct });
    if ($OS eq 'aix')
    {
        push(@routines, { description => "View User Account Details", needsUser => 1, routine => \&acct_detail });
        push(@routines, { description => "Change User Account Details", needsUser => 1, routine => \&chg_acct_detail });
        push(@routines, { description => "Reset password and unlock account", needsUser => 1, routine => \&fix_acct });
        push(@routines, { description => "Unlock account without resetting password", needsUser => 1, routine => \&unlock_acct });
    } else
    {
        push(@routines, { description => "View User Account Details", needsUser => 1, routine => \&acct_detail_linux });
        push(@routines, { description => "Change User Account Details", needsUser => 1, routine => \&chg_acct_detail_linux });
        push(@routines, { description => "Change User Account Password Expiry", needsUser => 1, routine => \&chg_acct_expire_linux });
        push(@routines, { description => "View All Users", needsUser => 0, routine => \&view_all_users });
        push(@routines, { description => "Reset password and unlock account", needsUser => 1, routine => \&fix_acct_linux });
        push(@routines, { description => "Unlock account without resetting password", needsUser => 1, routine => \&unlock_acct_linux });
    }
    push(@routines, { description => "Remove user account", needsUser => 1, routine => \&rm_acct });
    if (defined($ijs) && (length($ijs) > 0))
    {
        push(@routines, { description => "Manage CU TCS users", needsUser => 0, routine => \&cubs_user });
    }
    push(@routines, { description => "Exit\n", needsUser => 0, routine => \&quit });

    # print routines
    for (my $i = 0; $i < scalar(@routines); $i++)
    {
        print(($i + 1) . ") " . $routines[$i]->{description} . "\n");
    }

    print "------------------------------------------------------------------\n\n";
    print "Select Option(default: 1): ";

    my $opt = <>;
    chomp $opt;

    # iff (input is a digit) && (input is > 1) && (input does not exceed list length)
    if (($opt =~ m/^\d+$/) && ($opt > 0) && ($opt <= scalar(@routines)))
    {
        # options are listed starting at 1, but list is 0-indexed
        $opt--;

        # If user is not needed, proceed, otherwise check for user
        if ((!$routines[$opt]->{needsUser}) || exists($user{name}))
        {
            # execute code reference
            &{$routines[$opt]->{routine}}();
        }
    }
}

sub cubs_user {
    system("cd '$ijs'; /uv/bin/uv 'RUN IJS.BP CREATE.USER'");
}

sub get_users {
    my @users;
    open(my $passwd,"/etc/passwd");
    my @passwdLines = <$passwd>;
    close($passwd);

    my @shadowLines = split(/\n/, `sudo cat /etc/shadow`);
    chomp(@shadowLines);

    for my $line (@passwdLines)
    {
        chomp($line);
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{comment}, $user{home}, $user{shell}) = split(/:/, $line);
        $user{pgrp} = `sudo id -g -n $user{name}`;
        chomp($user{pgrp});
        my $groups = `sudo id -G -n $user{name}`;
        chomp($groups);
        $groups =~ s/$user{pgrp}//;
        $groups =~ s/^\s+|\s+$//g;
        @{$user{groups}} = split(/\s+/, $groups);
        my $shadow = (grep(/^$user{name}:/, @shadowLines))[0];
        my $dummy;
        if (defined($shadow))
        {
            ($dummy, $user{password}, $user{lastchange}, $user{minage}, $user{maxage}, $user{warningperiod}, $user{inactivityperiod}, $user{expirationdate}, $user{reserved}) = split(/:/, $shadow);
        } else
        {
            $user{password} = '';
            $user{lastchange} = '';
            $user{minage} = '';
            $user{maxage} = '';
            $user{warningperiod} = '';
            $user{inactivityperiod} = '';
            $user{expirationdate} = '';
            $user{reserved} = '';
        }
        push(@users, \%user);
    }
    return @users;
}

sub sel_user {
    print "\nEnter username or search string: ";
    my $search_str = <>;
    chomp($search_str);
    open(my $passwd,"/etc/passwd");
    my @passwdLines = <$passwd>;
    chomp(@passwdLines);
    my @matches = grep(/$search_str/i, @passwdLines);

    close($passwd);
    system("clear");
    if (scalar(@matches) > 0)
    {
        for my $i (0..$#matches) {
            my $match = $matches[$i];
            my @fields = split(/:/, $match);
            my $name = $fields[0];
            my $fullname = $fields[4];

            print "$i) $name\t" . (split(/,/, $fullname))[0] . "\n";
        }
        print "Select user index: ";
        my $usr_index = <>;
        chomp $usr_index;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{comment}, $user{home}, $user{shell}) = split(/:/, $matches[$usr_index]);
        $user{pgrp} = `sudo id -g -n $user{name}`;
        chomp($user{pgrp});
        @{$user{groups}} = split(/\s+/, `sudo id -G -n $user{name}`);
        shift(@{$user{groups}});
        chomp(@{$user{groups}});
    } else
    {
        print "NO MATCHES FOUND FOR SEARCH OF '$search_str'\n";
        print "\n\nPress enter to continue";
        my $ret = <>;
    }
}

sub view_all_users {
    my @users = get_users();
    my @sortoptions = (['name', 'User Name'], ['comment', 'Comment Field'], ['lastchange', 'Last Password Change'], ['expirationdate', 'Days until expiration'], ['uid', 'User ID'], ['pgrp', 'Primary Group'], ['maxage', 'Max Password Age']);
    my $option;
    while ((!defined($option)) or (length($option) == 0) or (($option < 0) or ($option > $#sortoptions)))
    {
        system("clear");
        for my $i (0..$#sortoptions)
        {
            print("$i) $sortoptions[$i]->[1]\n");
        }
        print("Select sort field: ");
        $option = <>;
        chomp($option);
    }
    my $sort = @sortoptions[$option]->[0];
    my @susers = sort {
            if (((!exists($a->{$sort})) or (length($a->{$sort}) == 0)) and ((!exists($b->{$sort})) or (length($b->{$sort}) == 0)))
            {
                return 0;
            } elsif ((!exists($a->{$sort})) or (length($a->{$sort}) == 0))
            {
                return -1;
            } elsif ((!exists($b->{$sort})) or (length($b->{$sort}) == 0))
            {
                return 1;
            } else
            {
                if (($a->{$sort} =~ m/^\d+$/) and ($b->{$sort} =~ m/^\d+$/))
                {
                    return $a->{$sort} <=> $b->{$sort};
                } else
                {
                    return $a->{$sort} cmp $b->{$sort};
                }
            }
        } @users;
    system("clear");

    printf("%15.15s %25.25s %25.25s %25.25s %15.15s\n", 'Username', 'Comment', 'Last password change', 'Days until expire', 'Max pass age');
    printf("%15.15s %25.25s %25.25s %25.25s %15.15s\n", '--------', '-------', '--------------------', '-----------------', '------------');
    # Current date in days since the epoch
    my $date = int(time/86400);
    for my $user (@susers)
    {
        my $lastchange = ((length($user->{lastchange}) > 0) ? (($date - $user->{lastchange}) . ' days ago') : 'N/A');
        my $expiration = ((length($user->{expirationdate}) > 0) ? $date - $user->{expirationdate} : 'Never');
        my $maxage = ((length($user->{maxage}) > 0) ? $user->{maxage} : 'None');
        printf("%15.15s %25.25s %25.25s %25.25s %15.15s\n", $user->{name}, $user->{comment}, $lastchange, $expiration, $maxage);
    }

    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub acct_detail {
    my @lsuser = split(/ /,`sudo lsuser $user{name}`);
    my %userdetail;
    foreach my $user (@lsuser) {
        chomp;
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }
    system("clear");
    print "username:                 $user{name}\n";
    print "primary group:            $userdetail{'pgrp'}\n";
    print "groups:                   $userdetail{'groups'}\n";
    print "shell:                    $userdetail{'shell'}\n";
    print "home:                     $userdetail{'home'}\n";
    print "login:                    $userdetail{'login'}\n";
    print "account locked:           $userdetail{'account_locked'}\n";
    print "unsuccessful login count: $userdetail{'unsuccessful_login_count'}\n";
    print "last successful login:    " . scalar(localtime($userdetail{'time_last_login'})) . "\n";
    print "last unsuccessful login:  " . scalar(localtime($userdetail{'time_last_unsuccessful_login'})) . "\n";
    print "Press enter to continue: ";
    my $input = <>;
}

sub acct_detail_linux {
    system("clear");
    print "username:    $user{name}\n";
    print "pgroup:      $user{pgrp}\n";
    print "groups:      " . join(', ', @{$user{groups}}) . "\n";
    print "uid:         $user{uid}\n";
    print "gid:         $user{gid}\n";
    print "details:     $user{comment}\n";
    print "home:        $user{home}\n";
    print "shell:       $user{shell}\n";
    print "\n";
    print "Expiry information:\n";
    print `sudo chage -l $user{name}`;
    print "\n";
    print "Press enter to continue: ";
    my $input = <>;
}

sub chg_acct_detail {
    system("clear");

    my @lsuser = split(/ /,`sudo lsuser $user{name}`);
    my $username = shift @lsuser;
    my %userdetail;

    foreach my $user (@lsuser) {
        chomp;
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }

    my %details;

    my $correct = "N";

    while ( $correct !~ /[Yy]/ ) {
        %details = %userdetail;
        my $input;
        print "Modify account $username:\n";
        print "Enter nothing to keep default\n";
        print "primary group [$details{pgrp}]: ";
        $input = <>;  chomp $input;
        $details{pgrp} = $input if ($input ne "");
        print "groups [$details{groups}]: ";
        $input = <>;  chomp $input;
        $details{groups} = $input if ($input ne "");
        print "shell [$details{shell}]: ";
        $input = <>;  chomp $input;
        $details{shell} = $input if ($input ne "");
        print "home [$details{home}]:\n";
        $input = <>;  chomp $input;
        $details{home} = $input if ($input ne "");
        print "-----------------------------------------------------------\n\n";
        print "username:                 $username\n";
        print "primary group:            $details{'pgrp'}\n";
        print "groups:                   $details{'groups'}\n";
        print "shell:                    $details{'shell'}\n";
        print "home:                     $details{'home'}\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("sudo chuser 'pgrp=$details{pgrp}' 'groups=$details{groups}' 'shell=$details{shell}' 'home=$details{home}' $username");

    acct_detail();
}

sub chg_acct_detail_linux {
    system("clear");

    my $correct = "N";

    my %details;

    while ( $correct !~ /[Yy]/ ) {
        %details = %user;
        $details{groups} = join(',', @{$user{groups}});

        my $input;
        print "Modify account $details{name}\n";
        print "Enter nothing to keep default\n";
        print "details [$details{comment}]: ";
        $input = <>;  chomp $input;
        $details{comment} = $input if ($input ne "");
        print "primary group [$details{pgrp}]: ";
        $input = <>;  chomp $input;
        $details{pgrp} = $input if ($input ne "");
        print "groups [$details{groups}]: ";
        $input = <>;  chomp $input;
        $details{groups} = $input if ($input ne "");
        print "shell [$details{shell}]: ";
        $input = <>;  chomp $input;
        $details{shell} = $input if ($input ne "");
        print "home [$details{home}]:";
        $input = <>;  chomp $input;
        $details{home} = $input if ($input ne "");
        print "-----------------------------------------------------------\n\n";
        print "username:                 $details{name}\n";
        print "details:                  $details{comment}\n";
        print "primary group:            $details{pgrp}\n";
        print "groups:                   $details{groups}\n";
        print "shell:                    $details{shell}\n";
        print "home:                     $details{home}\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }
    system("sudo usermod -c '$details{comment}' -d '$details{home}' -s '$details{shell}' -g '$details{pgrp}' -G '$details{groups}' $details{name}");

    $user{comment} = $details{comment};
    $user{home} = $details{home};
    $user{shell} = $details{shell};
    $user{pgrp} = $details{pgrp};
    @{$user{groups}} = split(/,/, $details{groups});

    acct_detail_linux();
}

sub chg_acct_expire_linux {
    system("clear");

    my $correct = "N";

    my $opts;

    while ( $correct !~ /[Yy]/ ) {
        $opts = "";

        my $input;
        print "Modify account $user{name}\n";
        print "Enter nothing to keep old value (viewable from user account details)\n";
        print "Expire date (YYYY-MM-DD format.  -1 to disable): ";
        $input = <>;  chomp $input;
        $opts .= " -E '$input'" if ($input ne "");
        print "Number of days of inactivity after password expires to lock account (-1 to disable): ";
        $input = <>;  chomp $input;
        $opts .= " -I '$input'" if ($input ne "");
        print "Minimum number of days between password changes (0 to disable, and let password be changed at any time): ";
        $input = <>;  chomp $input;
        $opts .= " -m '$input'" if ($input ne "");
        print "Maximum number of days between password changes (-1 to disable, making a password never expire): ";
        $input = <>;  chomp $input;
        $opts .= " -M '$input'" if ($input ne "");
        print "Number of days before expiry to warn that a password is going to expire:  ";
        $input = <>;  chomp $input;
        $opts .= " -W '$input'" if ($input ne "");
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }
    system("sudo chage $opts '$user{name}'");

    acct_detail_linux();
}

sub fix_acct {
    print "Resetting account: $user{name} for " . (split(/,/, $user{comment}))[0] . "\n";
    system("sudo passwd $user{name}");
    print "\nForce password change? (Y|N):";
    my $chpw = <>; chomp $chpw;
    if ($chpw =~ /[Nn]/) {
        system("sudo pwdadm -c $user{name}");
    }
    unlock_acct();
}

sub unlock_acct {
    print "Unlocking account: $user{name} for " . (split(/,/, $user{comment}))[0] . "\n";
    system("sudo chuser unsuccessful_login_count=0 account_locked=false $user{name}");
    print "\nUser Successfully Unlocked!\n";
    print "\nPress Enter to Continue\n";
    my $v = <>;
}
sub fix_acct_linux {
    print "Resetting account: $user{name} for $user{comment}\n";
    system("sudo passwd $user{name}");
    unlock_acct_linux();
}

sub unlock_acct_linux {
    print "Unlocking account: $user{name} for $user{comment}\n";
    system("sudo passwd -u $user{name}");
    system("sudo chage -d " . localtime->strftime('%F') . " $user{name}");
    print "\nUser Successfully Unlocked!\n";
    print "\nPress Enter to Continue\n";
    my $v = <>;
}

sub create_acct {
    system("clear");
    unless ($allowcreate)
    {
        print "THIS OPTION NO LONGER SUPPORTED.  PLEASE CREATE NEW USERS VIA Active Directory.\n";
        my $c = <>;
        return();
    }
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    while ( $correct !~ /[Yy]/ ) {
        print "Create new account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;
        print "\n\n-----------------------------------------------------------\n\n";
        print "Please confim user details:\n";
        print "-----------------------------------------------------------\n\n";
        print "Username:  $username\n";
        print "Fullname:  $fullname\n";
        print "Phone:     $phone\n";
        print "Location:  $location\n";
        print "Business:  $business\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("clear");
    print "Creating account $username for $fullname ...\n";
    if ($isFacs)
    {
        system("sudo useradd -c \"$fullname,$phone,$location,$business,USER,USER\" $username");
    } else
    {
        my $homedir;
        my $opts;
        if ($sharedhome)
        {
            $homedir = $home;
            $opts = '';
        } else
        {
            $homedir = "$home/$username";
            $opts = '-m';
        }
        system("sudo useradd $opts -g $pgrp -d \"$homedir\" -c \"$fullname,$phone,$location,$business,USER,USER\" $username");
    }
    system("sudo passwd $username");
    print "\n\nAccount creation complete.  The user will be required to change\n";
    print "their initial password.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub create_sftp_acct {
    system("clear");
    unless ($allowcreate)
    {
        print "THIS OPTION NO LONGER SUPPORTED.  PLEASE CREATE NEW USERS VIA Active Directory.\n";
        my $c = <>;
        return();
    }
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    while ( $correct !~ /[Yy]/ ) {
        print "Create new SFTP account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;
        print "\n\n-----------------------------------------------------------\n\n";
        print "Please confim user details:\n";
        print "-----------------------------------------------------------\n\n";
        print "Username:  $username\n";
        print "Fullname:  $fullname\n";
        print "Phone:     $phone\n";
        print "Location:  $location\n";
        print "Business:  $business\n";
        print "-----------------------------------------------------------\n\n";
        print "Is this correct? (Y|N) ";
        $correct = <>;  chomp $correct;
    }  
    system("clear");
    print "Creating SFTP account $username for $fullname ...\n";

    my $homedir = "$ftphome/$username";
    my $filesdir = "$homedir/files";

    system("sudo useradd -m -s /bin/false -g $ftpgrp -d \"$homedir\" -c \"$fullname,$phone,$location,$business,USER,USER\" $username");
    system("sudo chown root:$ftpgrp \"$homedir\"");
    system("sudo chmod 755 \"$homedir\"");

    system("sudo mkdir \"$filesdir\"");
    system("sudo chown $username:$ftpgrp \"$filesdir\"");
    system("sudo chmod 700 \"$filesdir\"");

    system("sudo passwd $username");

    print "\n\nSFTP account creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub rm_acct {
    system("clear");
    print "##################################################################\n";
    print "ABOUT TO REMOVE USER ACCCOUNT!!!\n";
    print "##################################################################\n\n";

    print "Enter Y to confirm account removal for user $user{name}: ";
    my $con = <>; chomp $con;
    if ($con eq "Y") {
        system("sudo userdel $user{name}");
        print "\n\nUser: $user{name} removed from $OS.\n";
        undef %user;
    }
    else {
        print "\n\nYou did not enter Y, returning to main menu without removing user.\n";
    }
    print "\nPress enter to continue ";
    my $ret = <>;
}

sub quit {
    exit @_;
}
