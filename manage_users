#!/usr/bin/perl
use warnings;
use strict;
use Time::Piece;
use Term::Menus;
use Data::Dumper;
use JSON;

sub ParseConfig($);

sub main;
sub dispatch;
sub clear;
sub buildopts;
sub change_account_detail;
sub change_account_detail_aix;
sub change_account_detail_linux;
sub change_account_expire;
sub change_account_expire_linux;
sub create_admin_account;
sub create_sftp_account_linux;
sub create_user_account;
sub delete_account;
sub get_users;
sub get_users_aix;
sub get_users_linux;
sub reset_password_aix;
sub reset_password_linux;
sub select_user;
sub unlock_account_aix;
sub unlock_account_linux;
sub unselect_user;
sub view_account_detail_aix;
sub view_account_detail_linux;
sub view_all_users;

# Parse stanzas into a hash of hashes
sub parsestanzas;
sub quit;

main();

sub ParseConfig($) {
    my $location = $_[0];
    my $data;
    local $/ = undef;
    open(my $file, '<', $location) or return {menu => []};
    binmode $file;
    my $json = <$file>;
    return decode_json($json);
}

my %data;
my $config;

sub main {
    $config = ParseConfig('/etc/manage_users.json');
    $config->{exit} = 0;

    my %allroutines = (
        change_account_detail => 'Change User Account Details',
        change_account_expire => 'Change User Account Password Expiry',
        create_admin_account => 'Create Admin account',
        create_sftp_account => 'Create client account',
        create_user_account => 'Create User account',
        delete_account => 'Remove user account',
        quit => 'Exit',
        reset_password => 'Reset password and unlock account',
        select_user => 'Select User',
        unlock_account => 'Unlock account without resetting password',
        unselect_user => 'Unselect User',
        view_account_detail => 'View User Account Details',
        view_all_users => 'View All Users'
    );

    my %menu = (
        Name => 'Menu',
        Select => 'One',
        Display => 25
    );

    my $count = 1;
    for my $item (@{$config->{menu}})
    {
        if (exists($allroutines{$item}))
        {
<<<<<<< HEAD
            $menu{"Item_$count"} = { Text => $allroutines{$item}, Result => "&dispatch('$item')" };
            $count++;
        } else
        {
            $menu{"Item_$count"} = { Text => "Could not find requested routine $item!  You are missing functionality!", Result => "&dispatch('$item')" };
            $count++;
=======
            if (exists($allroutines{$item}))
            {
                push(@routines, $allroutines{$item});
            } else
            {
                print("Could not find requested routine $item!  You are missing functionality!!\n");
            }
>>>>>>> oldmaster
        }
    }
    $menu{"Item_$count"} = { Text => $allroutines{quit}, Result => "&dispatch('quit')" } ;

    while (!$config->{exit})
    {
        if (exists($data{user})) {
            $menu{Banner} = "Selected User:  $data{user}->{name} => $data{user}->{comment}";
        } else {
            $menu{Banner} = "No user selected!  Please create or select a user to proceed";
        }

        my $result = &Menu(\%menu);

        $config->{exit} = 1 if ($result eq ']quit[');
    }
}

sub dispatch {
    my ($function) = @_;
    my %dispatch = (
        change_account_detail => {AIX => \&change_account_detail_aix, Linux => \&change_account_detail_linux},
        change_account_expire => {Linux => \&change_account_expire_linux},
        create_admin_account => {DEFAULT => \&create_admin_account},
        create_sftp_account => {Linux => \&create_sftp_account_linux},
        create_user_account => {DEFAULT => \&create_user_account},
        delete_account => {DEFAULT => \&delete_account},
        reset_password => {AIX => \&reset_password_aix, Linux => \&reset_password_linux},
        select_user => {DEFAULT => \&select_user},
        unlock_account => {AIX => \&unlock_account_aix, Linux => \&unlock_account_linux},
        unselect_user => {DEFAULT => \&unselect_user},
        view_account_detail => {AIX => \&view_account_detail_aix, Linux => \&view_account_detail_linux},
        view_all_users => {DEFAULT => \&view_all_users},
        quit => {DEFAULT => \&quit},
    );
    my %needs = (
        change_account_detail => [qw(user)],
        change_account_expire => [qw(user)],
        delete_account => [qw(user)],
        reset_password => [qw(user)],
        unlock_account => [qw(user)],
        unselect_user => [qw(user)],
        view_account_detail => [qw(user)]
    );

    my $os = $config->{OS};

    if (exists($dispatch{$function}))
    {
        if (exists($needs{$function}))
        {
            for my $need (@{$needs{$function}})
            {
                return if (not exists($data{$need}));
            }
        }
        if (exists($dispatch{$function}->{$os}))
        {
            $dispatch{$function}->{$os}->(\%data, $config);
        } elsif (exists($dispatch{$function}->{DEFAULT}))
        {
            $dispatch{$function}->{DEFAULT}->(\%data, $config);
        }
    }
}

sub clear {
    print("\n" x 200);
}

sub buildopts {
    my $opts = $_[0];
    my @singles;
    my @argopts;
    my @args;

    for my $opt (@{$opts})
    {
        if (ref($opt) eq 'ARRAY')
        {
            if (scalar(@{$opt} > 1))
            {
                # Make sure all single-quotes are escaped and everything else is properly captured
                my $optarg = $opt->[1];
                $optarg =~ s/'/'"'"'/g;
                push(@argopts, "-$opt->[0]", "'$optarg'");
            } else
            {
                push(@singles, $opt->[0]);
            }
        } else
        {
            my $arg = $opt;
            $arg =~ s/'/'"'"'/g;
            push(@args, "'$arg'");
        }
    }
    my @outstrings;

    if (scalar(@singles) > 0)
    {
        push(@outstrings, '-' . join('', @singles));
    }

    push(@outstrings, @argopts);
    push(@outstrings, @args);
    return join(' ', @outstrings);
}

sub get_users {
    my ($config) = @_;
    my %dispatch = (
        AIX => \&get_users_aix,
        Linux => \&get_users_linux
    );

    if (exists($dispatch{$config->{OS}}))
    {
        $dispatch{$config->{OS}}->();
    } else
    {
        print("There is no get_users function for OS $config->{OS}, this is a bug in the program or deployment.\n");
    }
}

# AIX get users
sub get_users_aix {

    my @users;
    my %userrefs;

    my %secpasswd = parsestanzas('/etc/security/passwd');
    my %secuser = parsestanzas('/etc/security/user');

    setpwent();
    while (my @pw = getpwent())
    {
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{quota}, $user{comment}, $user{gcos}, $user{home}, $user{shell}, $user{expire}) = @pw;
        $user{comment} ||= $user{gcos};

        $user{pgrp} = (getgrgid($user{gid}))[0];
        $user{groups} = [];

        # We set userrefs so that we can use the grent functions to fill the groups field idiomatically
        $userrefs{$user{name}} = \%user;

        if (defined($secpasswd{$user{name}}) && defined($secpasswd{$user{name}}{lastupdate}) && ($secpasswd{$user{name}}{lastupdate} =~ m/^\d+$/))
        {
            $user{lastchange} = $secpasswd{$user{name}}{lastupdate} / (60 * 60 * 24);
        } else
        {
            $user{lastchange} = '';
        }

        if (defined($secuser{$user{name}}) && defined($secuser{$user{name}}{maxage}) && ($secuser{$user{name}}{maxage} =~ m/^\d+$/))
        {
            $user{maxage} = $secuser{$user{name}}{maxage};
        } else
        {
            $user{maxage} = 0;
        }

        # Day of password expiration
        $user{expirationdate} = '';
        if ($user{maxage} > 0)
        {
            # Calculate the day of expiration
            $user{expirationdate} = (($user{maxage} * 7) + $user{lastchange})
        }

        $user{reserved} = '';
        push(@users, \%user);
    }
    endpwent();

    setgrent();
    while (my @gr = getgrent())
    {
        for my $member (split(/\s+/, $gr[3]))
        {
            unless ($gr[0] eq $userrefs{$member}->{pgrp})
            {
                push(@{$userrefs{$member}->{groups}}, $gr[0]);
            }
        }
    }
    endgrent();

    return @users;
}

sub get_users_linux {
    my @users;
    my %userrefs;

    my @shadowLines = split(/\n/, `cat /etc/shadow`);
    chomp(@shadowLines);

    setpwent();
    while (my @pw = getpwent())
    {
        my %user;
        ($user{name}, $user{password}, $user{uid}, $user{gid}, $user{quota}, $user{comment}, $user{gcos}, $user{home}, $user{shell}, $user{expire}) = @pw;
        $user{comment} ||= $user{gcos};

        $user{pgrp} = (getgrgid($user{gid}))[0];
        $user{groups} = [];

        # We set userrefs so that we can use the grent functions to fill the groups field idiomatically
        $userrefs{$user{name}} = \%user;
        my $shadow = (grep(/^$user{name}:/, @shadowLines))[0];
        my $dummy;
        if (defined($shadow))
        {
            ($dummy, $user{password}, $user{lastchange}, $user{minage}, $user{maxage}, $user{warningperiod}, $user{inactivityperiod}, $user{expirationdate}, $user{reserved}) = split(/:/, $shadow);
        } else
        {
            $user{password} = '';
            $user{lastchange} = '';
            $user{minage} = '';
            $user{maxage} = '';
            $user{warningperiod} = '';
            $user{inactivityperiod} = '';
            $user{expirationdate} = '';
            $user{reserved} = '';
        }
        push(@users, \%user);
    }
    endpwent();
    
    setgrent();
    while (my @gr = getgrent())
    {
        for my $member (split(/\s+/, $gr[3]))
        {
            unless ($gr[0] eq $userrefs{$member}->{pgrp})
            {
                push(@{$userrefs{$member}->{groups}}, $gr[0]);
            }
        }
    }
    endgrent();
    return @users;
}

sub select_user {
    my ($data, $config) = @_;
    print "\nEnter username or search string: ";
    my $search = <>;
    chomp($search);
    my $regex = qr/$search/;

    setpwent();
    my @matches;
    setpwent();
    while(my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwent())
    {
        if ($name =~ $regex or $uid =~ $regex or $comment =~ $regex or $gcos =~ $regex)
        {
            push(@matches, {name => $name, password => $passwd, uid => $uid, gid => $gid, comment => ($gcos or $comment), home => $dir, shell => $shell});
        }
    }
    endpwent();
    clear();

    if (scalar(@matches) > 0)
    {
        my %menu = (
            Name => 'Menu',
            Select => 'One',
            Banner => 'Choose a user',
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => []
            },
        );

        my %backsearch;

        for (my $i = 0; $i < scalar(@matches); ++$i)
        {
            my $match = $matches[$i];

            my $userstring = sprintf('%-16s%s', $match->{name}, $match->{comment});
            push(@{$menu{Item_1}->{Convey}}, $userstring);
            $backsearch{$userstring} = $match;
        }
        my $selection = &Menu(\%menu);
        return if ($selection eq ']quit[');

        my $user = $backsearch{$selection};

        $data->{user} = $user;

        $user->{pgrp} = getgrgid($user->{gid});
        $user->{groups} = [];
        setgrent();
        while (my ($name, $passwd, $gid, $members) = getgrent())
        {
            my $username = $user->{name};
            if (grep(/^$username$/, split(' ', $members)))
            {
                push(@{$user->{groups}}, $name);
            }
        }
        endgrent();
    } else
    {
        print "NO MATCHES FOUND FOR SEARCH OF '$search'\n";
        print "\n\nPress enter to continue";
        my $ret = <>;
    }
}

sub view_all_users {
    my ($data, $config) = @_;

    my @users;

    @users = get_users($config);

    my %sortoptions = ('User Name' => 'name',  'Comment Field' => 'comment',  'Last Password Change' => 'lastchange',  'Days until expiration' => 'expirationdate',  'User ID' => 'uid',  'Primary Group' => 'pgrp',  'Max Password Age' => 'maxage');
    my %sortmenu = (
        Name => 'Menu',
        Select => 'One',
        Banner => 'Select sort field',
        Display => 25,
        Item_1 => {
            Text => ']Convey[',
            Convey => []
        },
    );
    for my $option (keys(%sortoptions))
    {
        push(@{$sortmenu{Item_1}->{Convey}}, $option);
    }
    my $option = &Menu(\%sortmenu);

    return if ($option eq ']quit[');

    my $sort = $sortoptions{$option};
    my $sortdesc = $option;

    my @susers = sort {
            if (((!exists($a->{$sort})) or (length($a->{$sort}) == 0)) and ((!exists($b->{$sort})) or (length($b->{$sort}) == 0)))
            {
                return 0;
            } elsif ((!exists($a->{$sort})) or (length($a->{$sort}) == 0))
            {
                return -1;
            } elsif ((!exists($b->{$sort})) or (length($b->{$sort}) == 0))
            {
                return 1;
            } else
            {
                if (($a->{$sort} =~ m/^\d+$/) and ($b->{$sort} =~ m/^\d+$/))
                {
                    return $a->{$sort} <=> $b->{$sort};
                } else
                {
                    return $a->{$sort} cmp $b->{$sort};
                }
            }
        } @users;

    $option = &Menu({
        Name => 'Menu',
        Select => 'One',
        Banner => 'Would you like to reverse the sort?',
        Display => 25,
        Item_1 => {
            Text => ']Convey[',
            Convey => [qw(yes no)]
        },
    });

    if ($option eq 'yes')
    {
        @susers = reverse(@susers);
    }

    my %menu = (
        Name => 'Menu',
        Select => 'One',
        Banner => sprintf('%14s%15.15s %25.25s %25.25s', '', 'Username', 'Comment', $sortdesc),
        Display => 25,
        Item_1 => {
            Text => ']Convey[',
            Convey => []
        },
    );

    # Current date in days since the epoch
    my $date = int(time/86400);
    for my $user (@susers)
    {
        my %hash = %{$user};
        $hash{lastchange} = ((length($user->{lastchange}) > 0) ? sprintf('%.2f days ago', $date - $user->{lastchange}) : 'N/A');
        $hash{expirationdate} = ((length($user->{expirationdate}) > 0) ? sprintf('%.2f', $date - $user->{expirationdate}) : 'Never');
        $hash{maxage} = ((length($user->{maxage}) > 0) ? $user->{maxage} : 'None');
        push(@{$menu{Item_1}->{Convey}}, sprintf("%15.15s %25.25s %25.25s", $hash{name}, $hash{comment}, $hash{$sort}));
    }
    &Menu(\%menu);
    return 0;
}

sub view_account_detail_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    my @lsuser = split(/ /,`lsuser $user->{name}`);
    my %userdetail;
    foreach my $user (@lsuser) {
        chomp;
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }
    printf("%-40s%s\n", 'username:', $user->{name});
    printf("%-40s%s\n", 'primary group:', $userdetail{'pgrp'});
    printf("%-40s%s\n", 'groups:', $userdetail{'groups'});
    printf("%-40s%s\n", 'shell:', $userdetail{'shell'});
    printf("%-40s%s\n", 'home:', $userdetail{'home'});
    printf("%-40s%s\n", 'login:', $userdetail{'login'});
    printf("%-40s%s\n", 'account locked:', $userdetail{'account_locked'});
    printf("%-40s%s\n", 'unsuccessful login count:', defined($userdetail{'unsuccessful_login_count'}) ? $userdetail{'unsuccessful_login_count'} : 0);
    printf("%-40s%s\n", 'last successful login:', localtime($userdetail{'time_last_login'}));
    printf("%-40s%s\n", 'last unsuccessful login:', localtime($userdetail{'time_lastunsuccessful_login'}));

    print("\nPress Enter to Continue\n");
    my $v = <>;

    return;
}

sub view_account_detail_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    printf("%-20s%s\n", 'username:', $user->{name});
    printf("%-20s%s\n", 'pgroup:', $user->{pgrp});
    printf("%-20s%s\n", 'groups:', join(', ', @{$user->{groups}}));
    printf("%-20s%s\n", 'uid:', $user->{uid});
    printf("%-20s%s\n", 'gid:', $user->{gid});
    printf("%-20s%s\n", 'details:', $user->{comment});
    printf("%-20s%s\n", 'home:', $user->{home});
    printf("%-20s%s\n", 'shell:', $user->{shell});
    print(`chage -l $user->{name}`);

    print("\nPress Enter to Continue\n");
    my $v = <>;

    return;
}

sub change_account_detail_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();

    my @lsuser = split(/ /,`lsuser $user->{name}`);
    my $username = shift @lsuser;
    my %userdetail;

    foreach my $user (@lsuser) {
        chomp($user);
        my @el = split(/=/,$user);
        if ($#el > 0) {
            $userdetail{$el[0]} = $el[1];
        }
    }

    my %details;

    my $correct;

    do { 
        %details = %userdetail;
        my $input;
        print "Modify account $username:\n";
        print "Enter nothing to keep default\n";
        print "primary group [$details{pgrp}]: ";
        $input = <>;  chomp $input;
        $details{pgrp} = $input if ($input ne "");
        print "groups [$details{groups}]: ";
        $input = <>;  chomp $input;
        $details{groups} = $input if ($input ne "");
        print "shell [$details{shell}]: ";
        $input = <>;  chomp $input;
        $details{shell} = $input if ($input ne "");
        print "home [$details{home}]:\n";
        $input = <>;  chomp $input;
        $details{home} = $input if ($input ne "");

        my $banner = '-' x 60;
        $banner .= "\n";
        $banner .= sprintf("%-26s%s\n", 'username:', $username);
        $banner .= sprintf("%-26s%s\n", 'primary group:', $details{'pgrp'});
        $banner .= sprintf("%-26s%s\n", 'groups:', $details{'groups'});
        $banner .= sprintf("%-26s%s\n", 'shell:', $details{'shell'});
        $banner .= sprintf("%-26s%s\n", 'home:', $details{'home'});
        $banner .= '-' x 60;
        $banner .= "\n";
        $banner .= "Is this correct?";
        $correct = &Menu({
            Name => 'Menu',
            Select => 'One',
            Banner => $banner,
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => [qw(yes no)]
            },
        });

        return if ($correct eq ']quit[');
    } while ($correct ne 'yes');
    system("chuser 'pgrp=$details{pgrp}' 'groups=$details{groups}' 'shell=$details{shell}' 'home=$details{home}' $username");

    view_account_detail_aix(@_);
    return;
}

sub change_account_detail_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();

    my %details;

    my $correct;

    do {
        %details = %{$user};
        $details{groups} = join(',', @{$user->{groups}});

        my $input;
        print "Modify account $details{name}\n";
        print "Enter nothing to keep default\n";
        print "details [$details{comment}]: ";
        $input = <>;  chomp $input;
        $details{comment} = $input if ($input ne "");
        print "primary group [$details{pgrp}]: ";
        $input = <>;  chomp $input;
        $details{pgrp} = $input if ($input ne "");
        print "groups [$details{groups}]: ";
        $input = <>;  chomp $input;
        $details{groups} = $input if ($input ne "");
        print "shell [$details{shell}]: ";
        $input = <>;  chomp $input;
        $details{shell} = $input if ($input ne "");
        print "home [$details{home}]:";
        $input = <>;  chomp $input;
        $details{home} = $input if ($input ne "");

        my $banner = '-' x 60;
        $banner .= "\n";
        $banner .= sprintf("%-26s%s\n", 'username:', $details{name});
        $banner .= sprintf("%-26s%s\n", 'details:', $details{comment});
        $banner .= sprintf("%-26s%s\n", 'primary group:', $details{pgrp});
        $banner .= sprintf("%-26s%s\n", 'groups:', $details{groups});
        $banner .= sprintf("%-26s%s\n", 'shell:', $details{shell});
        $banner .= sprintf("%-26s%s\n", 'home:', $details{home});
        $banner .= '-' x 60;
        $banner .= "\n";
        $banner .= "Is this correct?";
        $correct = &Menu({
            Name => 'Menu',
            Select => 'One',
            Banner => $banner,
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => [qw(yes no)]
            },
        });
        return if ($correct eq ']quit[');
    } while ($correct ne 'yes');
    system("usermod -c '$details{comment}' -d '$details{home}' -s '$details{shell}' -g '$details{pgrp}' -G '$details{groups}' $details{name}");

    $user->{comment} = $details{comment};
    $user->{home} = $details{home};
    $user->{shell} = $details{shell};
    $user->{pgrp} = $details{pgrp};
    @{$user->{groups}} = split(/,/, $details{groups});

    view_account_detail_linux(@_);
    return;
}

sub change_account_expire_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};

    my $correct = 'no';

    my @opts;

    do {
        clear();

        @opts = ($user->{name});
        my $banner = '';

        my $input;
        print "Modify account $user->{name}\n";
        print "Enter nothing to keep old value (viewable from user account details)\n";

        print "Expire date (YYYY-MM-DD format.  -1 to disable): ";
        $input = <>;  chomp $input;
        push(@opts, ['E', $input]) if ($input ne "");
        $banner .= sprintf("%-50s%s\n", 'epire date:', $input) if ($input ne "");

        print "Number of days of inactivity after password expires to lock account (-1 to disable): ";
        $input = <>;  chomp $input;
        push(@opts, ['I', $input]) if ($input ne "");
        $banner .= sprintf("%-50s%s\n", 'inactivity days:', $input) if ($input ne "");

        print "Minimum number of days between password changes (0 to disable, and let password be changed at any time): ";
        $input = <>;  chomp $input;
        push(@opts, ['m', $input]) if ($input ne "");
        $banner .= sprintf("%-50s%s\n", 'minimum days between changes:', $input) if ($input ne "");

        print "Maximum number of days between password changes (-1 to disable, making a password never expire): ";
        $input = <>;  chomp $input;
        push(@opts, ['M', $input]) if ($input ne "");
        $banner .= sprintf("%-50s%s\n", 'maximum days between changes:', $input) if ($input ne "");

        print "Number of days before expiry to warn that a password is going to expire:  ";
        $input = <>;  chomp $input;
        push(@opts, ['W', $input]) if ($input ne "");
        $banner .= sprintf("%-50s%s\n", 'days to warn:', $input) if ($input ne "");

        $banner .= "\n";
        $banner .= "Is this correct?";

        $correct = &Menu({
            Name => 'Menu',
            Select => 'One',
            Banner => $banner,
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => [qw(yes no)]
            },
        });

        return if ($correct eq ']quit[');
    } while ( $correct ne 'yes' );
    system('chage ' . buildopts(\@opts));

    view_account_detail_linux(@_);
    return;
}

sub reset_password_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print "Resetting account: $user->{name} for " . (split(/,/, $user->{comment}))[0] . "\n";
    system("passwd $user->{name}");

    my $chpw = &Menu({
        Name => 'Menu',
        Select => 'One',
        Banner => 'Force password change?',
        Display => 25,
        Item_1 => {
            Text => ']Convey[',
            Convey => [qw(yes no)]
        },
    });

    if ($chpw ne 'yes') {
        system("pwdadm -c $user->{name}");
    }
    unlock_account_aix(@_);
    return;
}

sub unlock_account_aix {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print("Unlocking account: $user->{name} for " . (split(/,/, $user->{comment}))[0] . "\n");
    system("chuser unsuccessful_login_count=0 account_locked=false $user->{name}");
    print("\nUser Successfully Unlocked!\n");
    print("\nPress Enter to Continue\n");
    my $v = <>;
    return;
}
sub reset_password_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print "Resetting account: $user->{name} for $user->{comment}\n";
    system("passwd $user->{name}");
    unlock_account_linux(@_);
    return;
}

sub unlock_account_linux {
    my ($data, $config) = @_;
    my $user = $data->{user};
    print "Unlocking account: $user->{name} for $user->{comment}\n";
    system("passwd -u $user->{name}");
    system("chage -d " . localtime->strftime('%F') . " $user->{name}");
    print "\nUser Successfully Unlocked!\n";
    print "\nPress Enter to Continue\n";
    my $v = <>;
    return;
}

sub create_user_account {
    my ($data, $config) = @_;
    my $correct = "no";
    my ($username, $fullname, $phone, $location, $business);

    do {
        clear();
        print "Create new account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;
        my $banner = '-' x 60;
        $banner .= "\n";
        $banner .= "Please confim user details:\n";
        $banner .= sprintf("%-26s%s\n", 'Username:', $username);
        $banner .= sprintf("%-26s%s\n", 'Fullname:', $fullname);
        $banner .= sprintf("%-26s%s\n", 'Phone:', $phone);
        $banner .= sprintf("%-26s%s\n", 'Location:', $location);
        $banner .= sprintf("%-26s%s\n", 'Business:', $business);
        $banner .= '-' x 60;
        $banner .= "\n";
        $banner .= "Is this correct?";
        $correct = &Menu({
            Name => 'Menu',
            Select => 'One',
            Banner => $banner,
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => [qw(yes no)]
            },
        });
        return if ($correct eq ']quit[');

    } while ($correct ne 'yes');
    print("Creating account $username for $fullname ...\n");

    my @opts;
    if ($config->{user}->{sharedhome})
    {
        push(@opts, ['d', $config->{user}->{home}]);
    } else
    {
        push(@opts, ['d', "$config->{user}->{home}/$username"]);
        push(@opts, ['m']);
    }

    if (exists($config->{user}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{user}->{groups}})]);
    }

    push(@opts, ['g', $config->{user}->{pgrp}]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, $username);

    system('useradd ' . buildopts(\@opts));

    system("passwd $username");
    print "\n\nAccount creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub create_admin_account {
    my ($data, $config) = @_;
    clear();
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    do {
        print "Create new account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;

        my $banner = '-' x 60;
        $banner .= "\n";
        $banner .= "Please confim user details:\n";
        $banner .= sprintf("%-26s%s\n", 'Username:', $username);
        $banner .= sprintf("%-26s%s\n", 'Fullname:', $fullname);
        $banner .= sprintf("%-26s%s\n", 'Phone:', $phone);
        $banner .= sprintf("%-26s%s\n", 'Location:', $location);
        $banner .= sprintf("%-26s%s\n", 'Business:', $business);
        $banner .= '-' x 60;
        $banner .= "\n";
        $banner .= "Is this correct?";
        $correct = &Menu({
            Name => 'Menu',
            Select => 'One',
            Banner => $banner,
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => [qw(yes no)]
            },
        });
        return if ($correct eq ']quit[');
    } while ($correct ne 'yes');
    print "Creating account $username for $fullname ...\n";

    my @opts;
    if ($config->{admin}->{sharedhome})
    {
        push(@opts, ['d', $config->{admin}->{home}]);
    } else
    {
        push(@opts, ['d', "$config->{admin}->{home}/$username"]);
        push(@opts, ['m']);
    }

    if (exists($config->{admin}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{admin}->{groups}})]);
    }

    push(@opts, ['g', $config->{admin}->{pgrp}]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, $username);

    system('useradd ' . buildopts(\@opts));

    system("passwd $username");
    print "\n\nAccount creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub create_sftp_account_linux {
    my ($data, $config) = @_;
    clear();
    my $correct = "N";
    my ($username, $fullname, $phone, $location, $business);
    do {
        print "Create new SFTP account:\n";
        print "-----------------------------------------------------------\n\n";
        print "Enter username: ";
        $username = <>; chomp $username;
        print "Enter Full Name: ";
        $fullname = <>; chomp $fullname;
        print "Enter Phone Number: ";
        $phone = <>; chomp $phone;
        print "Enter Location: ";
        $location = <>; chomp $location;
        print "Enter Business Unit: ";
        $business = <>; chomp $business;

        my $banner = '-' x 60;
        $banner .= "\n";
        $banner .= "Please confim user details:\n";
        $banner .= sprintf("%-26s%s\n", 'Username:', $username);
        $banner .= sprintf("%-26s%s\n", 'Fullname:', $fullname);
        $banner .= sprintf("%-26s%s\n", 'Phone:', $phone);
        $banner .= sprintf("%-26s%s\n", 'Location:', $location);
        $banner .= sprintf("%-26s%s\n", 'Business:', $business);
        $banner .= '-' x 60;
        $banner .= "\n";
        $banner .= "Is this correct?";
        $correct = &Menu({
            Name => 'Menu',
            Select => 'One',
            Banner => $banner,
            Display => 25,
            Item_1 => {
                Text => ']Convey[',
                Convey => [qw(yes no)]
            },
        });
        return if ($correct eq ']quit[');
    } while ($correct ne 'yes');
    print "Creating SFTP account $username for $fullname ...\n";

    my @opts;
    my $homedir;
    if ($config->{ftpuser}->{sharedhome})
    {
        $homedir = $config->{ftpuser}->{home};
        push(@opts, ['d', $homedir]);
    } else
    {
        $homedir = "$config->{ftpuser}->{home}/$username";
        push(@opts, ['d', $homedir]);
        push(@opts, ['m']);
    }

    if (exists($config->{ftpuser}->{groups}))
    {
        push(@opts, ['G', join(',', @{$config->{ftpuser}->{groups}})]);
    }

    my $ftpgrp = $config->{ftpuser}->{pgrp};

    push(@opts, ['g', $ftpgrp]);
    push(@opts, ['c', "$fullname,$phone,$location,$business,USER,USER"]);
    push(@opts, ['s', '/sbin/nologin']);
    push(@opts, $username);


    system('useradd ' . buildopts(\@opts));


    system('useradd ' . buildopts(\@opts));
    system('chown ' . buildopts(["root:$ftpgrp", $homedir]));
    system('chmod ' . buildopts([755, $homedir]));

    my $filesdir = "$homedir/files";

    system('mkdir ' . buildopts([$filesdir]));
    system('chown ' . buildopts(["$username:$ftpgrp", $filesdir]));
    system('chmod ' . buildopts([700, $filesdir]));
    system('setfacl ' . buildopts([['m', "u:$username:rwx"], $filesdir]));
    system('setfacl ' . buildopts([['d'], ['m', "u:$username:rwx"], $filesdir]));
    system('setfacl ' . buildopts([['m', "g:$ftpgrp:rwx"], $filesdir]));
    system('setfacl ' . buildopts([['d'], ['m', "g:$ftpgrp:rwx"], $filesdir]));
    system('setfacl ' . buildopts([['m', "g:$config->{admin}->{group}:rwx"], $filesdir]));
    system('setfacl ' . buildopts([['d'], ['m', "g:$config->{admin}->{group}:rwx"], $filesdir]));

    system("passwd $username");

    print "\n\nSFTP account creation complete.\n";
    print "\n\nPress enter to continue";
    my $ret = <>;
}

sub delete_account {
    my ($data, $config) = @_;
    my $user = $data->{user};
    clear();
    my $banner = "##################################################################\n";
    $banner .= "ABOUT TO REMOVE USER ACCCOUNT!!!\n";
    $banner .= "##################################################################\n\n";

    $banner .= "Are you sure you want to delete user $user->{name}?";
    my $con = &Menu({
        Name => 'Menu',
        Select => 'One',
        Banner => $banner,
        Display => 25,
        Item_1 => {
            Text => ']Convey[',
            Convey => [qw(yes no)]
        },
    });

    if ($con eq 'yes') {
        system("userdel $user->{name}");
        print "\n\nUser: $user->{name} removed from $config->{OS}.\n";
        delete($data->{user});
    } else {
        print "\n\nYou did not select yes, returning to main menu without removing user.\n";
    }
    print "\nPress enter to continue ";
    my $ret = <>;
}

sub unselect_user {
    my ($data, $config) = @_;
    my $username = $data->{user}->{name};
    delete($data->{user});
    print("Unselected user $username\n");
    print("\nPress enter to continue ");
    my $ret = <>;
}

sub parsestanzas {
    my $filename = $_[0];
    my %output;
    my $stanza = 'default';

    open(my $file, '-|', "cat $filename");
    while (my $line = <$file>)
    {
        chomp($line);
        if ($line =~ m/^([^\s#\*]+):\s*$/)
        {
            $stanza = $1;
        } elsif ($line =~ m/^\s+(\S+)\s*=\s*(.*)$/)
        {
            $output{$stanza}{$1} = $2;
        }
    }
    close($file);

    return %output;
}

sub quit {
    my ($data, $config) = @_;
    $config->{exit} = 1;
}
