#!/usr/bin/perl
# Copyright © 2016-2017 Taylor C. Richberger <tcr@absolute-performance.com>,
# Absolute Performance, Inc.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
use warnings;
use strict;

use Pod::Usage;
use Getopt::Std;
use Time::Piece;

sub markretains($$$$\%\%$);

sub main;
exit main();

sub main
{
    my %opts = (
        w => 0,
        m => 0,
        d => 0,
    );
    if (not getopts('cw:m:d:hk', \%opts))
    {
        pod2usage({-verbose => 1, -exitval => 1, -output => \*STDERR});
    }
    if ($opts{h})
    {
        pod2usage({-verbose => 2, -exitval => 1, -output => \*STDOUT});
    }
    if (scalar(@ARGV) != 1)
    {
        pod2usage({-verbose => 1, -exitval => 1, -output => \*STDERR});
    }
    my $format = $ARGV[0];
    my %files;
    my %all;
    my $earliest = localtime;
    my $latest = localtime;
    while (my $name = <STDIN>)
    {
        chomp($name);

        # Strptime dies if it gets an unparsable string
        eval {
            my $time = Time::Piece->strptime($name, $format);
            if ($time)
            {
                if ($time < $earliest)
                {
                    $earliest = $time;
                }
                if ($time > $latest)
                {
                    $latest = $time;
                }
                # Because days are the granularity, this is the easiest way to handle this
                $files{$time->year}{$time->mon}{$time->mday} = $name;
                $all{$name} = undef;
            }
        };
    }
    my %retain;
    # The basic logic is that it marks files from %files to retain into the
    # %retain hash.  These are checked against %all to get total keeps and
    # removes
    markretains($opts{d}, 1, $earliest, $latest, %files, %retain, $opts{c});
    markretains($opts{w}, 7, $earliest, $latest, %files, %retain, $opts{c});
    markretains($opts{m}, 28, $earliest, $latest, %files, %retain, $opts{c});
    my @removes;
    my @keeps;
    for my $name (keys(%all))
    {
        if (exists($retain{$name}))
        {
            push(@keeps, $name);
        } else
        {
            push(@removes, $name);
        }
    }
    @removes = sort(@removes);
    @keeps = sort(@keeps);
    # Print all of either @keeps or @removes
    for my $name ($opts{k} ? @keeps : @removes)
    {
        print("$name\n");
    }
    return 0;
}

sub markretains($$$$\%\%$)
{
    my ($totalkeep, $spacing, $earliest, $latest, $files, $retain, $conservative) = @_;
    my @keepfiles;
    my $day = 60 * 60 * 24;
    $earliest -= $day;
    $latest += $day;
    my $current = $earliest;
    my $keeps = 0;

    # The algorithm here is relatively simple.  Using the spacing, mark each
    # file in the set from earliest to latest.  Splice that to only the most
    # current files in the set matching the number to keep.  If liberal
    # retention is desired, also mark the oldest files iteratively to hit the
    # total number of kept items.
    while ($current <= $latest) {
        # Get all files matching skip from earliest to latest, and then flip
        # them to trim
        if (exists($files->{$current->year}{$current->mon}{$current->mday})) {
            ++$keeps;
            push(@keepfiles, $files->{$current->year}{$current->mon}{$current->mday});

            $current += $day * $spacing;
        } else
        {
            $current += $day;
        }
    }

    # Reverse to keep end elements
    if (scalar(@keepfiles) > $totalkeep) {
        @keepfiles = reverse(@keepfiles);
        splice(@keepfiles, $totalkeep);
    }

    for my $file (@keepfiles) {
        $retain->{$file} = undef;
    }

    if (not $conservative) {
        $current = $earliest;
        # If we went past the earliest without getting all files, just mark the earliest to keep regardless
        while ($totalkeep > $keeps) {
            if (exists($files->{$current->year}{$current->mon}{$current->mday})) {
                ++$keeps;
                $retain->{$files->{$current->year}{$current->mon}{$current->mday}} = undef;
                # Remove so it can't be considered for other items
            }

            $current += $day;

            last if ($current > $latest);
        }
    }
}

=pod

=encoding utf-8

=head1 NAME

retain version 1.1.0

=head1 SYNOPSIS

retain [OPTIONS] {FILEFORMAT}

=head1 OPTIONS

=over 16

=item C<-d> I<amount>

Number of dailies to keep

=item C<-w> I<amount>

Number of weeklies to keep

=item C<-m> I<amount>

Number of monthlies to keep

=item C<-c>

Conservative retention.

By default retain saves files liberally, if all of a schedule's files are marked
(such as -w 7, but there are only 4 weeks), it will mark older files
incrementally until the total number of files is kept (so given -w 7 with 4
weeks of backups, it will take the 4 weeklies, and also keep the 3 oldest
backups in the set).  This option will reverse this behavior and only literally
retain on the schedule.

=item C<-h>

Show a help menu

=item C<-k>

Output the items to keep, rather than the ones to remove

=back

=head1 ARGUMENTS

=over 16

=item C<fileformat>

A format passed to match the file with timestamp parts against for strptime

=back

=head1 DESCRIPTION

Take a list of files in standard input, determine which ones are to be deleted
against the retention scheme, and output those to standard output

=head1 LICENSE

Copyright © 2016-2017 Taylor C. Richberger <tcr@absolute-performance.com>,
Absolute Performance, Inc.
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
