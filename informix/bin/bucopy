#!/bin/sh
# bucopy
# (If renamed, change its name in POD, too)
# Manage Informix Dynamic Server 9.4 physical backup files
#  between production and disaster recovery systems
# Copyright (c) 2010 Absolute Performance Inc., LLC. All rights reserved.

# echo "this command has been disabled"; exit;
# this is a multilanguage script:
#   1. a shell script to set up the environment
. /API/ids
case $(hostname | cut -d . -f 1) in
   v11100)
      perl=/usr/opt/perl5/bin/perl
   ;;
   v611100)
      perl=/usr/opt/perl5/bin/perl
   ;;
   *)
      perl=/usr/bin/perl  
   ;;
esac
exec $perl -x -S $0 ${1+"$@"}
#   2. A Perl script to do the work
#!perl
# kluge: align Perl line number so the line after the next line is...
# line 28

use warnings;
use strict;
use FindBin qw{$Bin};
use lib "$Bin/../lib"; # ApiIdsPha module is in a sibling dir to us
use ApiIdsPha;
use English qw{-no_match_vars};
use File::Spec::Functions qw{splitpath};
use Getopt::Long;
use Net::Domain qw{hostname hostfqdn};
use POSIX qw{strftime};
use Pod::Usage;
#use Data::Dumper;
#$Data::Dumper::Terse = 1;
#$Data::Dumper::Sortkeys = 1;
#$Data::Dumper::Indent = 3;
sub copy_bkup_to_remote_system;
sub submit_burest_job;
sub touch_time;

my $version = '2.2'; # don't forget to change the imbedded POD, too

# These are on the remote (disaster recovery) system
# name and path of burest
my $burest_name = 'burest';
my $burest_path = '/API/bin/burest';

my (undef, undef, $progname) = splitpath $0;
my $hostname = hostname();
my $username = getpwuid $EUID;

# validate command line options
my ($help_opt, $man_opt, $version_opt, $verbose_opt, $test_opt,) = (0, 0, 0, 0, 0,);
my ($print_opt, $log_opt, $quiet_opt, $mail_opt, ) = (1, 1, 0, 0,);
my $ssh_opt = 1;
my $rsync_opt = 1;
my $copy_backup_opt = 1;
my $restore_opt = 0;
GetOptions(
   'help|?' => \$help_opt,
   'man' => \$man_opt,
   'version' => \$version_opt,
   'restore!' => \$restore_opt,
   'copy!' => \$copy_backup_opt,
   'rsync!' => \$rsync_opt,
   'ssh!' => \$ssh_opt,
   'log!' => \$log_opt,
   'print!' => \$print_opt,
   'quiet' => \$quiet_opt,
   'mail!' => \$mail_opt,
   'test' => \$test_opt,
   'verbose' => \$verbose_opt,
) or pod2usage 'Errors were found in the command options.';
if ($version_opt) {
   print "$progname version $version\n";
   exit 1;
} 
pod2usage '-verbose' => 2
   if $man_opt;
pod2usage
   if $help_opt;

# quiet option forces off all normal output
$verbose_opt = $log_opt = $print_opt = 0 if $quiet_opt;
# don't write to log file if in test mode
$log_opt = 0 if $test_opt;

# mail and remote host parameters
my $remote_host;
my $you_are_here = 0;
set_mail_from $username . '@' . hostfqdn();
set_mail_subject "$hostname: $progname status";
if ($hostname eq 'quattrof14') {
   $you_are_here = 1;
   $remote_host = 'miata';
   set_mail_host $hostname;
   set_mail_to(
      'bart@idmcnet.com',
   );
} elsif ($hostname eq 'miata') {
   $you_are_here = 1;
   $remote_host = 'quattrof14';
   set_mail_host $hostname;
   set_mail_to(
      'bart@idmcnet.com',
   );
} elsif ($hostname eq 'v11100') {
   $you_are_here = 1;
   $remote_host = 'v611100';
   set_mail_host 'crpexca02';
   set_mail_to(
      'helpdesk@integramed.com',
      'csteam@absolute-performance.com',
   );
   set_mail_cc(
      'ccs@absolute-performance.com',
      'bws@absolute-performance.com',
   );
} elsif ($hostname eq 'v611100') {
   $you_are_here = 1;
   $remote_host = 'v11100';
   set_mail_host 'crpexca02';
   set_mail_to(
      'helpdesk@integramed.com',
      'csteam@absolute-performance.com',
   );
   set_mail_cc(
      'ccs@absolute-performance.com',
      'bws@absolute-performance.com',
   );
} else {
   set_mail_host 'localhost';
   set_mail_to('root');
}

set_shared_variables({
   hostname          => $hostname,
   progname          => $progname,
   test_opt          => $test_opt,
   print_opt         => $print_opt,
   log_opt           => $log_opt,
   mail_opt          => $mail_opt,
   verbose_opt       => $verbose_opt,
}); 
log_die "Hostname \"$hostname\" is unknown to $progname"
   unless $you_are_here;
set_signal_data;
get_set_environment_variables;

my $at_name = 'at';
my $at_path = locate_cmd($at_name);
my $at_output = '2>&1';
my $gzip_name = 'gzip';
my $gzip_path = locate_cmd($gzip_name);
my $gzip_compress_opt = '-c';
my $gzip_decompress_opt = '-d';
my $touch_name = 'touch';
my $touch_path = locate_cmd($touch_name);
my $touch_opt = '-t';
my $touch_strftime_format = '%Y%m%d%H%M.%S';
my ($rshell_name, $rcopy_name, $rcopy_opt);
if ($ssh_opt) {
   $rshell_name = 'ssh';
   $rcopy_name = 'scp';
   $rcopy_opt = '-pq';
} else {
   $rshell_name = 'rsh';
   $rcopy_name = 'rcp';
   $rcopy_opt = '-p';
}
my $rshell_path = locate_cmd($rshell_name);
my $rcopy_path = locate_cmd($rcopy_name);
my $rcopy_output = '2>&1';
my $rsync_name = 'rsync';
my $rsync_path = locate_cmd($rsync_name);
my $rsync_cmd_opt = "-a --partial -e $rshell_path";
my $rsync_verbose_opt = '-v';
my $rsync_quiet_opt = '-q';
my $rsync_zip_opt = '-z';
my $rsync_output = '2>&1';
my $lang_kluge = 'LANG=en_US';

my %onconfig_parms;
parse_onconfig(\%onconfig_parms);
my (
   undef,
   $ids_logical_log_backup_dir,
   $ids_logical_log_backup_name,
   $ids_logical_log_backup_real_dir,
   ) = validate_ltapedev(\%onconfig_parms);
my (
   $ids_physical_backup_pathname,
   undef,
   undef,
   $ids_physical_backup_mtime,
   $ids_physical_backup_size,
   $ids_physical_backup_real_pathname,
   $ids_physical_backup_zip_pathname, 
   $ids_physical_backup_zip_mtime,
   $ids_physical_backup_zip_size,
   ) = validate_tapedev(\%onconfig_parms);
# use gzipped level-0 physical backup file if it has the same modification
#   time as the uncompressed one or if the uncompressed one is empty
my $ids_physical_backup_used_pathname;
my $ids_physical_backup_used_mtime;
my $use_gzipped_ids_physical_backup;
if (defined($ids_physical_backup_zip_pathname) and
   ( $ids_physical_backup_zip_mtime == $ids_physical_backup_mtime or
     $ids_physical_backup_size == 0 )
   ) {
   $use_gzipped_ids_physical_backup = 1;
   $ids_physical_backup_used_pathname = $ids_physical_backup_zip_pathname;
   $ids_physical_backup_used_mtime = $ids_physical_backup_zip_mtime;
} else {
   $use_gzipped_ids_physical_backup = 0;
   $ids_physical_backup_used_pathname = $ids_physical_backup_real_pathname;
   $ids_physical_backup_used_mtime = $ids_physical_backup_mtime;
}

chdir $ids_logical_log_backup_real_dir
   or log_die 'Unable to set current directory to ' .
          "$ids_logical_log_backup_real_dir ($OS_ERROR)";

umask 0007;     # make all files output from this rw-rw----
my $exit_code = 0;
set_running_state;
start_logging "${progname}.log";
log_print
   "Physical backup file",
   "Onconfig:    $ids_physical_backup_pathname",
   ($ids_physical_backup_real_pathname eq $ids_physical_backup_pathname ? () :
      "Real target: $ids_physical_backup_real_pathname"),
   "  Modification time is " . display_time($ids_physical_backup_mtime),
   "  Size is " . $ids_physical_backup_size,
   (defined($ids_physical_backup_zip_pathname) ?
      ("Gzipped:     $ids_physical_backup_zip_pathname",
      "  Modification time is " . display_time($ids_physical_backup_zip_mtime),
      "  Size is " . $ids_physical_backup_zip_size,
      ) : ()),
   "Used:        $ids_physical_backup_used_pathname",
   "Logical log backup directory is $ids_logical_log_backup_dir",
   ($ids_logical_log_backup_real_dir eq $ids_logical_log_backup_dir ? () :
      "Real target: $ids_logical_log_backup_real_dir"),
   "Using remote shell $rshell_name",
   "Disaster recovery system address is $remote_host",
   if $verbose_opt;

if ($copy_backup_opt) {
   copy_bkup_to_remote_system;
} else {
   log_print 'Copying of level-0 physical backup file skipped per --nocopy option';
}
if ($restore_opt) {
   submit_burest_job;
} else {
   log_print 'Restoration of level-0 physical backup file skipped per --norestore option';
}

at_exit;
exit $exit_code;

sub copy_bkup_to_remote_system {
   log_print 'Level-0 physical backup copy from '
             . $ids_physical_backup_used_pathname
             . " to $remote_host";
   my $physical_backup_copy_cmdline;
   if ($rsync_opt) {
      $physical_backup_copy_cmdline = join(' ',
         $rsync_path,
         $rsync_cmd_opt,
         ($verbose_opt ? $rsync_verbose_opt : $rsync_quiet_opt ),
         ($use_gzipped_ids_physical_backup ? () : $rsync_zip_opt ),
         $ids_physical_backup_used_pathname,
         $remote_host . ':' . $ids_physical_backup_used_pathname,
         $rsync_output,
      );
   } elsif ($use_gzipped_ids_physical_backup) {
      $physical_backup_copy_cmdline = join(' ',
         $rcopy_path,
         $rcopy_opt,
         $ids_physical_backup_used_pathname,
         $remote_host . ':' . $ids_physical_backup_used_pathname,
         $rcopy_output,
      );
   } else {
      $physical_backup_copy_cmdline = join(' ',
         '{',                              # following runs on local system
            # zip backup file into pipe
            $gzip_path,
                $gzip_compress_opt,
                $ids_physical_backup_used_pathname,
            '|',
            # pipe through remote shell to disaster recvovery system
            $rshell_path,
               $remote_host,
               '\'{',                      # following runs on remote system
            # out of pipe, unzip backup file back to disc
                  $gzip_path,
                  $gzip_decompress_opt,
                  '>' . $ids_physical_backup_used_pathname . ';',
            # reset times of backup file 
                  $touch_path,
                  $touch_opt,
                  touch_time($ids_physical_backup_mtime),
                  $ids_physical_backup_used_pathname . ';',
               '}\';',                     # following runs on local system
         '}',
         '2>&1'
      );
   }
   if (! $test_opt) {
      log_print $physical_backup_copy_cmdline
         if $verbose_opt;
                                     # here's where physical backup copy is run
      my @pbu_copy_out = qx{$physical_backup_copy_cmdline};
      my $pbu_copy_sig = $CHILD_ERROR & 127;       # signal
      my $pbu_copy_rc = $CHILD_ERROR >> 8 ;        # return code
      my $pbu_copy_msg = "Level-0 physical backup remote copy exited with return code $pbu_copy_rc";
      if ($CHILD_ERROR == -1) {
         log_die "Failed to execute remote copy of level-0 physical backup file ($OS_ERROR)";
      } elsif ($pbu_copy_sig) {
         log_die "Level-0 physical backup file remote copy died with signal $pbu_copy_sig";
      } else {
         chomp @pbu_copy_out;
         log_print map({"copy: $_"} @pbu_copy_out);
         if ($pbu_copy_rc) {
            $restore_opt = 0;
            $exit_code = 1;
            log_warn $pbu_copy_msg;
            log_print "Forcing --norestore";
         } else {
            log_print $pbu_copy_msg;
         }
      }
   } else {
      # test output
      log_print $physical_backup_copy_cmdline;
   }
   log_print 'End level-0 physical backup file remote copy';
}

sub submit_burest_job {
   my $rshell_cmdline = join(' ',
      $rshell_path,
      $remote_host,
      q{"},
         q{echo},
            q{'},
            $lang_kluge,
            $burest_path,
            ($verbose_opt ? '--verbose' : ()), # empty list is omitted from list to join
            ($test_opt ? '--test' : ()),
            ($print_opt ? () : '--noprint'),
            ($log_opt ? () : '--nolog'),
            q{'},
         q{|},
         $at_path,
         q{now},
         $at_output,
      q{"},
   );
   log_print "Submitting $burest_name job";
   log_print $rshell_cmdline
      if $verbose_opt or $test_opt;
   my @burest_out = qx{$rshell_cmdline};   # here's where burest is run
   my $burest_sig = $CHILD_ERROR & 127;    # signal
   my $burest_rc = $CHILD_ERROR >> 8;      # return code
   my $burest_msg = "$rshell_name or $at_name exited "
                     . "with return code $burest_rc";
   if ($CHILD_ERROR == -1) {
      log_die "Failed to execute $at_name on $remote_host " .
          "via $rshell_name ($OS_ERROR)";
   } elsif ($burest_sig) {
      log_die "$at_name on $remote_host via $rshell_name " .
          "died with signal $burest_sig";
   } else {
      chomp @burest_out;
      log_print map({"$at_name: $_"} @burest_out);
      if ($burest_rc) {
         $exit_code = 1;
         log_warn $burest_msg;
      }
   }
}

sub touch_time {
   return strftime('%Y%m%d%H%M.%S', localtime($_[0]));
}

__END__

=head1 NAME

bucopy - copy an Informix Dynamic Server 9.4 level-0 physical backup file between systems.

=head1 VERSION

This documentation corresponds to bucopy version 2.2.

=head1 SYNOPSIS

bucopy [--[no]copy] [--[no]rsync] [--[no]restore] [--[no]mail] [--[no]ssh] [--test] [--verbose] [--[no]log] [--[no]print] [--quiet] [--help|--?] [--man] [--version]

example: bucopy

=head1 OPTIONS

Options can be abbreviated as long as they are unambiguous.
Options shown above with B<[no]> can be negated by prefixing the option with "B<no>" or "B<no->".

=over 8

=item B<--copy>

Copy the level-0 physical backup file to the remote system (this is the default).

=item B<--rsync>

Selects which program is used to compress the level-0 physical backup file while it is in transit to the remote system.
B<--rsync> causes the B<rsync> program to be executed (this is the default).
B<rsync> pipes the data through B<rsh> or B<ssh> across the network.

B<--norsync> causes the B<gzip> and B<touch> programs to be executed; B<ssh> or B<rsh> pipe the data across the network.
If a gzip-format copy of the level-0 physical backup file exists and meets all criteria (below), B<gzip> and B<touch> are not executed, and B<scp> or B<rcp> are used to copy the data across the network.

=item B<--restore>

Run B<burest> to restore the level-0 physical backup file on the remote system (the default is B<--norestore>).

=item B<--mail>

Sends mail if warnings or errors are generated.
Prints warnings or errors to stderr if B<--nomail> is in effect (this is the default).

=item B<--ssh>

Use secure shell (B<ssh>, B<scp>) for remote connections (this is the default).
B<--nossh> causes B<rsh> and B<rcp> to be used.

=item B<--test>

Print what would be done, but don't make any changes.

=item B<--verbose>

Print more details about what is being done.

=item B<--log>

Print program activity to a log file (this is the default).

=item B<--print>

Print program activity to standard output (this is the default).

=item B<--quiet>

Equivalent to specifying B<--nolog> and B<--noprint>.

=item B<--help> or B<--?>

Print synopsis and exit.

=item B<--man>

Print complete help and exit.

=item B<--version>

Print the version number of the program and exit.

=back

=head1 DESCRIPTION

This program copies an Informix Dynamic Server 9.4 level-0 physical backup file between systems.
It is usually run on the production system (where the file is created by another process); it copies the file to the remote, disaster recovery system.

If B<--restore> is specified, the B<burest> program is run on the remote system to restore the level-0 physical backup file.
However, if there is a failure in copying the file, B<burest> is not run.

=head1 ENVIRONMENT VARIABLES

This program requires certain Informix-specified environment variables to be set.
If they are not, built-in default values are used to set the environment variables.

=over 8

=item B<INFORMIXDIR>

Specifies the base directory of the Informix Dynamic Server installed product.
The default value used if B<INFORMIXDIR> is not set is B</Medic/APPS/Informix1>.

=item B<INFORMIXSERVER>

Specifies the name of the IDS server instance.
The default value used if B<INFORMIXSERVER> is not set is B<ifx1>.

=item B<INFORMIXSQLHOSTS>

Specifies the full path of the IDS sqlhosts file, normally the B<$INFORMIXDIR/etc/sqlhosts> file.
The default value used if B<INFORMIXSQLHOSTS> is not set is B<$INFORMIXDIR/etc/sqlhosts>.

=item B<ONCONFIG>

Specifies the name of the IDS server configuration file which is located in the B<$INFORMIXDIR/etc> directory.
The default value used if B<ONCONFIG> is not set is B<onconfig.ifx1>.

=item B<PATH>

B<$INFORMIXDIR/bin> is appended to the B<PATH> if it does not appear within the B<PATH>.

=back

=head1 B<FILES>

=over 8

=item B<onconfig>

The file specified by the B<ONCONFIG> environment variable is accessed to determine certain files used.

The B<LTAPEDEV> parameter setting is used.
It is the full pathname of the logical log backup file written by B<ontape>.
This must be identical on production and disaster recovery systems.

The B<TAPEDEV> parameter setting is used.
It is the full pathname of the level-0 physical backup file written by B<ontape>.
This must be identical on production and disaster recovery systems.

=item B<Level-0 Physical Backup File>

The level-0 physical backup file path is determined as above.
This file is created by another process.

A gzip-compressed version of the level-0 physical backup file is used if it exists and meets the following criteria:

The file is in the same directory as the level-0 physical backup file.

The file has the same name as the level-0 physical backup file with ".gz" replacing any file name suffix.

The file's modification timestamp is the same as the level-0 physical backup file or the latter is empty.

=item B<Execution Log>

Unless B<--nolog> is specified, a log of program output is written to B<bucopy.log> in the logical log backup directory.

=item B<Execution State File>

A file, B<bucopy.state>, is kept in the logical log backup directory.
It is used to ensure only one copy of B<bucopy> runs at a time.
If this file incorrectly reflects the execution status, it can be deleted, provided B<bucopy> is not running.

=back

=head1 B<Programs>

=over 8

=item B<at>

The B<at> command is used to run the B<burest> program on the remote system.
By running a batch job, dropped connections do not interrupt the execution of B<burest>.

=item B<burest>

The B<burest> program is run on the remote system to restore the level-0 physical backup file.

=item B<rsync>

The B<rsync> command is used to compress and copy the level-0 physical backup file for transmission from the production system to the disaster recovery system.
This reduces the load and time of transmitting the file on the network.

=item B<gzip>

The B<gzip> command is used to compress the level-0 physical backup file for transmission from the production system to the disaster recovery system.
It is also used on the disaster recovery system to uncompress the file.
This reduces the load and time of transmitting the file on the network.

=item B<ssh, scp, rsh, rcp>

These programs are used to access the remote system, depending on the B<--ssh> option.

=item B<touch>

The B<touch> command is used to set the modification timestamp of the level-0 physical backup file on the disaster recovery system to be the same as the original file on the production system.
B<touch> is used when B<gzip> is used, because B<gzip> output piped through a remote shell does not preserve the modification timestamp.

=back

=head1 BUGS AND LIMITATIONS

The B<--norsync> and B<--nossh> options may cause this program not to regain control after launching the B<gzip>, B<rsh>, B<gzip>, B<touch> pipeline.
Redardless, the level-0 physical backup is copied and the timestamp is set.
The hang-up seems to be in the remote shell program; using the B<--ssh> or B<--rsync> options (the default) circumvents the problem.
B<rcp> or B<scp>, used when the gzip-format level-0 physical backup file is copied, work properly.

Several environmental items are contained within this program:

=over 

=item the default Informix environment variable values

=item the addresses of mail recipients

=item the pathname of the B<burest> program on the remote, disaster recovery system

=item the remote, disaster recovery system address

=back

The level-0 physical backup file and the logical log backup files must be disc files.

The B<LTAPEDEV> parameter in the B<onconfig> file must be identical on the production and disaster recovery systems.
The B<TAPEDEV> parameter in the B<onconfig> file must be identical on the production and disaster recovery systems.

The directory containing the logical log backup file is used to hold the log file from this program.
This is the path of the B<LTAPEDEV> parameter, excluding the file name.

The paths to B<gzip> and B<touch> are presumed to be the same on production and disaster recovery systems.

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Absolute Performance Inc., LLC. All rights reserved.

This program is the property of Absolute Performance Inc., LLC and may be used only in accordance with a separate license or contract agreement.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

=cut

