#!/usr/bin/perl
use warnings;
use strict;
use Term::Menu;
use Fcntl qw(:flock SEEK_END);

sub main;
sub clear;
sub pause;
sub buildopts;
sub readstanzafile($);
sub readstanzafileheader($);
sub writestanzafile($$\%);
sub stanzastring($\%);

sub list_locked_users;
sub unlock_user;
sub unlock_all;

main();

sub main {
    my @menu = (
        \&list_locked_users, ['List Locked Users', 'l'],
        \&unlock_user, ['Unlock User', 'u'],
        \&unlock_all, ['Unlock All Users', 'a'],
        0, ['Quit', 'q']
    );
    my $prompt = Term::Menu->new(beforetext => 'Manage Locked Users', aftertext => ' > ');

    while (1)
    {
        clear();

        my $result = $prompt->menu(@menu);

        return if (not $result);

        $result->();
    }
}

sub list_locked_users
{
    clear();

    my %user = readstanzafile('/etc/security/user');
    my %lastlog = readstanzafile('/etc/security/lastlog');

    # Make a full list of users
    my %userlist;
    @userlist{keys(%user)} = ();
    @userlist{keys(%lastlog)} = ();

    my @table;
    for my $username (keys(%userlist))
    {
        next if ($username eq 'default');

        my $user = $user{$username};
        my $lastlog = $lastlog{$username};

        my $loginretries;

        if (exists($user->{loginretries}))
        {
            $loginretries = $user->{loginretries};
        } elsif (exists($user{default}->{loginretries}))
        {
            $loginretries = $user{default}->{loginretries};
        } else
        {
            $loginretries = 0;
        }

        my $accountlocked;

        if (exists($user->{account_locked}))
        {
            $accountlocked = $user->{account_locked};
        } elsif (exists($user{default}->{account_locked}))
        {
            $accountlocked = $user{default}->{account_locked};
        } else
        {
            $accountlocked = 'false';
        }

        # Set $accountlocked to be a boolean
        $accountlocked = $accountlocked eq 'true';

        my $loginfailures = exists($lastlog->{unsuccessful_login_count}) ? $lastlog->{unsuccessful_login_count} : 0;

        if (($loginretries > 0 and $loginfailures >= $loginretries) or $accountlocked)
        {
            push(@table, [$username, $loginfailures, $loginretries, $accountlocked ? 'true' : 'false']);
        }
    }

    Term::Menu->new()->table(
        ['Username', 'Failed Login Count', 'Allowed retries', 'Account Locked'],
        \@table
    );

    pause();
}

sub unlock_user
{
    clear();

    my %user = readstanzafile('/etc/security/user');
    my $userheader = readstanzafileheader('/etc/security/user');
    my %lastlog = readstanzafile('/etc/security/lastlog');
    my $lastlogheader = readstanzafileheader('/etc/security/lastlog');

    # Make a full list of users
    my %userlist;
    @userlist{keys(%user)} = ();
    @userlist{keys(%lastlog)} = ();

    my @menu;
    my $i = 0;
    for my $username (keys(%userlist))
    {
        next if ($username eq 'default');

        my $user = $user{$username};
        my $lastlog = $lastlog{$username};

        my $loginretries;

        if (exists($user->{loginretries}))
        {
            $loginretries = $user->{loginretries};
        } elsif (exists($user{default}->{loginretries}))
        {
            $loginretries = $user{default}->{loginretries};
        } else
        {
            $loginretries = 0;
        }

        my $accountlocked;

        if (exists($user->{account_locked}))
        {
            $accountlocked = $user->{account_locked};
        } elsif (exists($user{default}->{account_locked}))
        {
            $accountlocked = $user{default}->{account_locked};
        } else
        {
            $accountlocked = 'false';
        }

        # Set $accountlocked to be a boolean
        $accountlocked = $accountlocked eq 'true';

        my $loginfailures = exists($lastlog->{unsuccessful_login_count}) ? $lastlog->{unsuccessful_login_count} : 0;

        if (($loginretries > 0 and $loginfailures >= $loginretries) or $accountlocked)
        {
            push(@menu, {user => $user, lastlog => $lastlog});
            push(@menu, [$username, ++$i]);
        }
    }

    push(@menu, 0);
    push(@menu, ['Cancel', 0]);

    my $selection = Term::Menu->new(beforetext => 'Select a user to unlock', aftertext => ' > ')->menu(@menu);

    if ($selection)
    {
        $selection->{lastlog}->{unsuccessful_login_count} = 0;
        $selection->{user}->{account_locked} = 'false';

        writestanzafile('/etc/security/user', $userheader, %user);
        writestanzafile('/etc/security/lastlog', $lastlogheader, %lastlog);
    }

    pause();
}

sub unlock_all
{
    clear();

    my %user = readstanzafile('/etc/security/user');
    my $userheader = readstanzafileheader('/etc/security/user');
    my %lastlog = readstanzafile('/etc/security/lastlog');
    my $lastlogheader = readstanzafileheader('/etc/security/lastlog');

    # Make a full list of users
    my %userlist;
    @userlist{keys(%user)} = ();
    @userlist{keys(%lastlog)} = ();

    my %unlockedusers;
    for my $username (keys(%userlist))
    {
        next if ($username eq 'default');

        my $user = $user{$username};
        my $lastlog = $lastlog{$username};

        my $loginretries;

        if (exists($user->{loginretries}))
        {
            $loginretries = $user->{loginretries};
        } elsif (exists($user{default}->{loginretries}))
        {
            $loginretries = $user{default}->{loginretries};
        } else
        {
            $loginretries = 0;
        }

        my $accountlocked;

        if (exists($user->{account_locked}))
        {
            $accountlocked = $user->{account_locked};
        } elsif (exists($user{default}->{account_locked}))
        {
            $accountlocked = $user{default}->{account_locked};
        } else
        {
            $accountlocked = 'false';
        }

        # Set $accountlocked to be a boolean
        $accountlocked = $accountlocked eq 'true';

        my $loginfailures = exists($lastlog->{unsuccessful_login_count}) ? $lastlog->{unsuccessful_login_count} : 0;

        if ($loginretries > 0 and $loginfailures >= $loginretries)
        {
            $lastlog->{unsuccessful_login_count} = 0;
            $unlockedusers{$username} = undef;
        }

        if ($accountlocked)
        {
            $user->{account_locked} = 'false';
            $unlockedusers{$username} = undef;
        }
    }

    writestanzafile('/etc/security/user', $userheader, %user);
    writestanzafile('/etc/security/lastlog', $lastlogheader, %lastlog);

    Term::Menu->new()->table(
        ['The following users were unlocked'],
        [map({[$_]} keys(%unlockedusers))]
    );
    pause();
}

sub clear {
    system('clear');
}

sub pause {
    Term::Menu->new()->question('Press enter to continue');
    return;
}

sub buildopts {
    my @singles;
    my @argopts;
    my @args;

    for my $opt (@_)
    {
        if (ref($opt) eq 'ARRAY')
        {
            if (scalar(@{$opt} > 1))
            {
                # Make sure all single-quotes are escaped and everything else is properly captured
                my $optarg = $opt->[1];
                $optarg =~ s/'/'"'"'/g;
                push(@argopts, "-$opt->[0]", "'$optarg'");
            } else
            {
                push(@singles, $opt->[0]);
            }
        } else
        {
            my $arg = $opt;
            $arg =~ s/'/'"'"'/g;
            push(@args, "'$arg'");
        }
    }
    my @outstrings;

    if (scalar(@singles) > 0)
    {
        push(@outstrings, '-' . join('', @singles));
    }

    push(@outstrings, @argopts);
    push(@outstrings, @args);
    return join(' ', @outstrings);
}

sub readstanzafile($) {
    my $filename = $_[0];
    my %output;
    my $stanza = 'default';

    open(my $file, '<', $filename);
    flock($file, LOCK_SH) or die("Could not lock file $filename - $!");
    while (my $line = <$file>)
    {
        chomp($line);
        if ($line =~ m/^([^\s#\*]+):\s*$/)
        {
            $stanza = $1;
        } elsif ($line =~ m/^\s+([^\s#\*]+)\s*=\s*(.*)$/)
        {
            $output{$stanza}{$1} = $2;
        }
    }
    flock($file, LOCK_UN) or die("Could not unlock file $filename - $!");
    # Because the file is repeatedly written and read, we want to make sure it's fully flushed.
    close($file);

    return %output;
}

sub readstanzafileheader($) {
    my $filename = $_[0];
    my @output;

    open(my $file, '<', $filename);
    flock($file, LOCK_SH) or die("Could not lock file $filename - $!");
    while (my $line = <$file>)
    {
        chomp($line);
        if (($line =~ m/^([^\s#\*]+):\s*$/) or ($line =~ m/^\s+([^\s#\*]+)\s*=\s*(.*)$/))
        {
            last;
        } elsif(length($line) > 0)
        {
            push(@output, $line);
        }
    }
    flock($file, LOCK_UN) or die("Could not unlock file $filename - $!");
    # Because the file is repeatedly written and read, we want to make sure it's fully flushed.
    close($file);

    return join("\n", @output);
}

sub writestanzafile($$\%) {
    my ($filename, $header, $stanzas) = @_;

    open(my $file, '>', $filename);
    flock($file, LOCK_EX) or die("Could not lock file $filename - $!");

    print($file "$header\n\n");

    if (exists($stanzas->{default}))
    {
        print($file stanzastring('default', %{$stanzas->{default}}));
        print($file "\n");
    }
    while (my ($username, $hash) = each(%{$stanzas}))
    {
        next if ($username eq 'default');
        print($file stanzastring($username, %{$hash}));
        print($file "\n");
    }
    flock($file, LOCK_UN) or die("Could not unlock file $filename - $!");
    # Because the file is repeatedly written and read, we want to make sure it's fully flushed.
    close($file);
}

sub stanzastring($\%) {
    my ($name, $hash) = @_;

    my $output = "$name:\n";

    while (my ($key, $value) = each(%{$hash}))
    {
        $output .= "\t$key = $value\n";
    }

    return $output;
}

=pod

=encoding utf-8

=head1 NAME

lockedusers

=head1 SYNOPSIS

# lockedusers

$ sudo lockedusers

=head1 DESCRIPTION

This is a simple script used to unlock user accounts.

=head1 LICENSE

Copyright © 2015 Taylor C. Richberger <taywee@gmx.com>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
